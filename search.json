[{"path":[]},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement william_swl@163.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://william-swl.github.io/baizer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 baizer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://william-swl.github.io/baizer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Song. Author, maintainer.","code":""},{"path":"https://william-swl.github.io/baizer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Song W (2023). baizer: Useful Functions Data Processing. R package version 0.3.5, https://github.com/william-swl/baizer.","code":"@Manual{,   title = {baizer: Useful Functions for Data Processing},   author = {William Song},   year = {2023},   note = {R package version 0.3.5},   url = {https://github.com/william-swl/baizer}, }"},{"path":"https://william-swl.github.io/baizer/index.html","id":"baizer-","dir":"","previous_headings":"","what":"Useful Functions for Data Processing","title":"Useful Functions for Data Processing","text":"ancient Chinese mythology, Bai Ze divine creature knows needs everything. baizer provides data processing functions frequently used author. Hope package also knows want!","code":""},{"path":"https://william-swl.github.io/baizer/index.html","id":"installation","dir":"","previous_headings":"","what":"installation","title":"Useful Functions for Data Processing","text":"can install stable version baizer like : install development version baizer like :","code":"install.packages(\"baizer\") devtools::install_github(\"william-swl/baizer\")"},{"path":[]},{"path":"https://william-swl.github.io/baizer/index.html","id":"tbflt","dir":"","previous_headings":"S3 classes in baizer","what":"tbflt","title":"Useful Functions for Data Processing","text":"save series filter conditions, support logical operation among conditions use filterC apply tbflt dplyr::filter strict limitation avoid unexpected default behavior","code":"c1 <- tbflt(cut == \"Fair\") c2 <- tbflt(x > 8) c1 | c2 #> <quosure> #> expr: ^cut == \"Fair\" | x > 8 #> env:  0x55be8db5db30  mini_diamond %>%   filterC(c1) %>%   head(5) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 3 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> 4 id-12  0.71 Fair  IF       3205  5.87  5.81 #> 5 id-18  0.34 Fair  VVS1     1012  4.8   4.76  mini_diamond %>%   filterC(!c1) %>%   head(5) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 2 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 3 id-4   1.54 Ideal SI2      9452  7.43  7.45 #> 4 id-5   0.72 Ideal VS1      2498  5.73  5.77 #> 5 id-7   0.27 Good  VVS1      752  4.1   4.07  mini_diamond %>% filterC(c1 & c2) #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-68  2.32 Fair  SI1     18026  8.47  8.31 # default behavior of dplyr::filter, use column in data at first x <- 8 mini_diamond %>% dplyr::filter(y > x) #> # A tibble: 53 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  7 id-13  0.56 Ideal SI1      1633  5.31  5.32 #>  8 id-14  0.3  Ideal VVS2      812  4.33  4.39 #>  9 id-15  0.28 Good  IF        612  4.09  4.12 #> 10 id-16  0.41 Good  I1        467  4.7   4.74 #> # … with 43 more rows  # so the default behavior of filterC is just like that # but if you want y > 8, and the defination of cond is far away from # its application, the results may be unexpected  x <- 8 cond <- tbflt(y > x) mini_diamond %>% filterC(cond) #> # A tibble: 53 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  7 id-13  0.56 Ideal SI1      1633  5.31  5.32 #>  8 id-14  0.3  Ideal VVS2      812  4.33  4.39 #>  9 id-15  0.28 Good  IF        612  4.09  4.12 #> 10 id-16  0.41 Good  I1        467  4.7   4.74 #> # … with 43 more rows  cond <- tbflt(y > 8) mini_diamond %>% filterC(cond) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57   # to avoid this, set usecol=FALSE. An error will be raised for warning you # to change the variable name # mini_diamond %>% filterC(cond, usecol=FALSE)   # you can always ignore this argument if you know how to use .env or !! x <- 8 cond1 <- tbflt(y > !!x) mini_diamond %>% filterC(cond1) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57  cond2 <- tbflt(y > .env$x) mini_diamond %>% filterC(cond1) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57"},{"path":"https://william-swl.github.io/baizer/index.html","id":"basic-utils","dir":"","previous_headings":"","what":"basic utils","title":"Useful Functions for Data Processing","text":"use %nin% get ‘’ logical value use %neq% get NA supported ‘equal’ logical value dump vector string index different character index character fetch character strings trans fixed string regular expression string detect possible duplication vector, ignore case, blank special character extract key values character vector farthest point sampling (FPS) vector","code":"1 %nin% c(1, 2, 3) #> [1] FALSE  1 %nin% c(2, 3) #> [1] TRUE NA != 0 #> [1] NA  NA != NA #> [1] NA  NA %neq% 0 #> [1] TRUE  NA %neq% NA #> [1] FALSE collapse_vector(c(\"A\" = 2, \"B\" = 3, \"C\" = 4), front_name = TRUE, collapse = \";\") #> [1] \"A(2);B(3);C(4)\"  collapse_vector(c(\"A\" = 2, \"B\" = 3, \"C\" = 4), front_name = FALSE, collapse = \",\") #> [1] \"2(A),3(B),4(C)\" diff_index(\"AAAA\", \"ABBA\") #> [[1]] #> [1] 2 3  # ignore case diff_index(\"AAAA\", \"abba\", ignore_case = TRUE) #> [[1]] #> [1] 2 3  # only the index of nth different character, NA if unaccessible diff_index(\"AAAA\", \"ABBA\", nth = 2) #> [[1]] #> [1] 3  diff_index(\"AAAA\", \"ABBA\", 10) #> [[1]] #> [1] NA  # second and third indices diff_index(\"AAAA\", \"ABBB\", nth = 2:3) #> [[1]] #> [1] 3 4  # support vectorized operations diff_index(c(\"ABBA\", \"AABB\"), \"AAAA\") #> [[1]] #> [1] 2 3 #>  #> [[2]] #> [1] 3 4 # just like diff_index same_index(c(\"ABBA\", \"AABB\"), \"AAAA\") #> [[1]] #> [1] 1 4 #>  #> [[2]] #> [1] 1 2 fetch_char(rep(\"ABC\", 3), list(1, 2, 3)) #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"B\" #>  #> [[3]] #> [1] \"C\"  # accept the output of `diff_index` or `same_index` str1 <- c(\"ABCD\", \"AAEF\") str2 <- c(\"AAAA\", \"AAAA\") fetch_char(str1, diff_index(str1, str2)) #> [[1]] #> [1] \"B\" \"C\" \"D\" #>  #> [[2]] #> [1] \"E\" \"F\"  # if the output of `diff_index` have NA, also return NA fetch_char(str1, diff_index(str1, str2, nth = 1:3), na.rm = FALSE) #> [[1]] #> [1] \"B\" \"C\" \"D\" #>  #> [[2]] #> [1] \"E\" \"F\" NA  # remove NA fetch_char(str1, diff_index(str1, str2, nth = 1:5), na.rm = TRUE) #> [[1]] #> [1] \"B\" \"C\" \"D\" #>  #> [[2]] #> [1] \"E\" \"F\"  # collapse the characters from a same string fetch_char(str1, diff_index(str1, str2, nth = 1:5), na.rm = TRUE, collapse = \",\") #> [[1]] #> [1] \"B,C,D\" #>  #> [[2]] #> [1] \"E,F\" fix_to_regex(\"ABC|?(*)\") #> [1] \"ABC\\\\|\\\\?\\\\(\\\\*\\\\)\" detect_dup(c(\"a\", \"B\", \"C_\", \"c -\", \"#A\")) #> [1] \"a\"   \"#A\"  \"C_\"  \"c -\" extract_kv(c(\"x: 1\", \"y: 2\")) #>   x   y  #> \"1\" \"2\" fps_vector(1:10, 2) #> [1]  1 10  fps_vector(1:10, 4) #> [1]  1  4  7 10  fps_vector(c(1, 2, NULL), 2) #> [1] 1 2  fps_vector(c(1, 2, NA), 2) #> [1]  1 NA"},{"path":"https://william-swl.github.io/baizer/index.html","id":"numbers","dir":"","previous_headings":"","what":"numbers","title":"Useful Functions for Data Processing","text":"float number fixed digits character signif round string depend character length whether number string zero float percent trans wrapper functions process number string prefix suffix expand number vector according adjacent two numbers","code":"round(2.1951, 2) #> [1] 2.2  round_string(2.1951, 2) #> [1] \"2.20\"  signif(2.1951, 3) #> [1] 2.2  signif_string(2.1951, 3) #> [1] \"2.20\" signif_round_string(20.526, 2, \"short\") #> [1] \"21\" signif_round_string(20.526, 2, \"long\") #> [1] \"20.53\"  # but will keep the raw value if necessary signif_round_string(0.000002654, 3) #> [1] \"0.00000265\" is.zero(\"0.000\") #> [1] TRUE  is.zero(\"0.0001\") #> [1] FALSE float_to_percent(0.123, digits = 1) #> [1] \"12.3%\"  percent_to_float(\"123%\", digits = 3) #> [1] \"1.230\"  percent_to_float(\"123%\", digits = 3, to_double = TRUE) #> [1] 1.23 number_fun_wrapper(\">=2.134%\", function(x) round(x, 2)) #> [1] \">=2.13%\" adjacent_div(10^c(1:3), n_div = 10) #>  [1]   10   20   30   40   50   60   70   80   90  100  100  200  300  400  500 #> [16]  600  700  800  900 1000  # only keep the unique numbers adjacent_div(10^c(1:3), n_div = 10, .unique = TRUE) #>  [1]   10   20   30   40   50   60   70   80   90  100  200  300  400  500  600 #> [16]  700  800  900 1000"},{"path":"https://william-swl.github.io/baizer/index.html","id":"dataframe","dir":"","previous_headings":"","what":"dataframe","title":"Useful Functions for Data Processing","text":"minimal dataset shortcut dplyr::column_to_rownames dplyr::rownames_to_column fancy count show extended column split column return longer tibble move selected rows target location slice tibble ordered vector remove columns ratio NA, default remove columns NA remove rows ratio NA separate numeric vector bins","code":"head(mini_diamond) #> # A tibble: 6 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #> 5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #> 6 id-6   2.02 Fair  SI2     14080  8.33  8.37 head(mini_diamond) %>% c2r(\"id\") #>      carat   cut clarity price    x    y #> id-1  1.02  Fair     SI1  3027 6.25 6.18 #> id-2  1.51  Good     VS2 11746 7.27 7.18 #> id-3  0.52 Ideal    VVS1  2029 5.15 5.18 #> id-4  1.54 Ideal     SI2  9452 7.43 7.45 #> id-5  0.72 Ideal     VS1  2498 5.73 5.77 #> id-6  2.02  Fair     SI2 14080 8.33 8.37  # use column index head(mini_diamond) %>% c2r(1) #>      carat   cut clarity price    x    y #> id-1  1.02  Fair     SI1  3027 6.25 6.18 #> id-2  1.51  Good     VS2 11746 7.27 7.18 #> id-3  0.52 Ideal    VVS1  2029 5.15 5.18 #> id-4  1.54 Ideal     SI2  9452 7.43 7.45 #> id-5  0.72 Ideal     VS1  2498 5.73 5.77 #> id-6  2.02  Fair     SI2 14080 8.33 8.37  head(mini_diamond) %>%   c2r(\"id\") %>%   r2c(\"id\") #> # A tibble: 6 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #> 5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #> 6 id-6   2.02 Fair  SI2     14080  8.33  8.37 # count one column fancy_count(mini_diamond, cut) #> # A tibble: 3 × 3 #>   cut       n     r #>   <chr> <int> <dbl> #> 1 Fair     35  0.35 #> 2 Good     31  0.31 #> 3 Ideal    34  0.34  # count an extended column fancy_count(mini_diamond, cut, ext = clarity) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  # change format fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"ratio\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                      #>   <chr> <int> <dbl> <chr>                                                        #> 1 Fair     35  0.35 I1(0.14),IF(0.11),SI1(0.14),SI2(0.11),VS1(0.09),VS2(0.14),V… #> 2 Good     31  0.31 I1(0.16),IF(0.16),SI1(0.13),SI2(0.13),VS1(0.06),VS2(0.13),V… #> 3 Ideal    34  0.34 I1(0.12),IF(0.12),SI1(0.15),SI2(0.12),VS1(0.15),VS2(0.06),V…  fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"clean\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                         #>   <chr> <int> <dbl> <chr>                           #> 1 Fair     35  0.35 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 2 Good     31  0.31 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 3 Ideal    34  0.34 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2  # count an extended column, in an order by n fancy_count(mini_diamond, cut, ext = clarity, sort = TRUE) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),SI1(5),VS2(5),VVS1(5),IF(4),SI2(4),VVS2(4),VS1(3) #> 2 Ideal    34  0.34 SI1(5),VS1(5),VVS1(5),VVS2(5),I1(4),IF(4),SI2(4),VS2(2) #> 3 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS2(4),VVS1(4),VVS2(3),VS1(2)  # extended column after a two-column count fancy_count(mini_diamond, cut, clarity, ext = id) %>% head(5) #> # A tibble: 5 × 5 #>   cut   clarity     n     r id                                           #>   <chr> <chr>   <int> <dbl> <chr>                                        #> 1 Fair  I1          5  0.05 id-20(1),id-23(1),id-28(1),id-32(1),id-48(1) #> 2 Fair  IF          4  0.04 id-12(1),id-45(1),id-89(1),id-95(1)          #> 3 Fair  SI1         5  0.05 id-1(1),id-64(1),id-65(1),id-68(1),id-76(1)  #> 4 Fair  SI2         4  0.04 id-25(1),id-40(1),id-6(1),id-99(1)           #> 5 Fair  VS1         3  0.03 id-36(1),id-43(1),id-85(1) fancy_count(mini_diamond, cut, ext = clarity) %>%   split_column(name_col = cut, value_col = clarity) #> # A tibble: 24 × 2 #>    cut   clarity #>    <chr> <chr>   #>  1 Fair  I1(5)   #>  2 Fair  IF(4)   #>  3 Fair  SI1(5)  #>  4 Fair  SI2(4)  #>  5 Fair  VS1(3)  #>  6 Fair  VS2(5)  #>  7 Fair  VVS1(5) #>  8 Fair  VVS2(4) #>  9 Good  I1(5)   #> 10 Good  IF(5)   #> # … with 14 more rows # move row 3-5 after row 8 move_row(mini_diamond, 3:5, .after = 8) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  4 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  7 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  8 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # … with 90 more rows  # move row 3-5 before the first row move_row(mini_diamond, 3:5, .before = TRUE) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  5 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # … with 90 more rows  # move row 3-5 after the last row move_row(mini_diamond, 3:5, .after = TRUE) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  4 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-9   1.01 Ideal SI1      5590  6.43  6.4  #>  7 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #>  8 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  9 id-12  0.71 Fair  IF       3205  5.87  5.81 #> 10 id-13  0.56 Ideal SI1      1633  5.31  5.32 #> # … with 90 more rows ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\")) #> # A tibble: 2 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18  # support NA and known values in ordered vector ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", \"id-3\", NA)) #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> NA values! #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> duplicated values! #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 <NA>  NA    <NA>  <NA>       NA NA    NA    #> 4 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 5 <NA>  NA    <NA>  <NA>       NA NA    NA  # remove NA ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", \"id-3\", NA),   na.rm = TRUE ) #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> NA values! #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> duplicated values! #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 id-3   0.52 Ideal VVS1     2029  5.15  5.18  # remove duplication ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", \"id-3\", NA),   dup.rm = TRUE ) #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> NA values! #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> duplicated values! #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 <NA>  NA    <NA>  <NA>       NA NA    NA df_with_nacol <- dplyr::bind_cols(   mini_diamond,   tibble::tibble(na1 = NA, na2 = NA) ) df_with_nacol #> # A tibble: 100 × 9 #>    id    carat cut   clarity price     x     y na1   na2   #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> <lgl> <lgl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 NA    NA    #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 NA    NA    #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 NA    NA    #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 NA    NA    #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 NA    NA    #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 NA    NA    #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 NA    NA    #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 NA    NA    #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  NA    NA    #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 NA    NA    #> # … with 90 more rows  remove_nacol(df_with_nacol) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # … with 90 more rows  # remove the columns that have more than 20% NA values # remove_nacol(df_with_nacol, max_ratio=0.2) # remove_narow(df) vector <- dplyr::pull(mini_diamond, price, id)  hist_bins(vector, bins = 20) #> # A tibble: 100 × 5 #>    id    value  start    end   bin #>    <chr> <int>  <dbl>  <dbl> <int> #>  1 id-1   3027  2218.  3097.     3 #>  2 id-2  11746 11000. 11879.    13 #>  3 id-3   2029  1340.  2218.     2 #>  4 id-4   9452  9244  10122.    11 #>  5 id-5   2498  2218.  3097.     3 #>  6 id-6  14080 13635  14513.    16 #>  7 id-7    752   462   1340.     1 #>  8 id-8   1029   462   1340.     1 #>  9 id-9   5590  4853   5731.     6 #> 10 id-10  1691  1340.  2218.     2 #> # … with 90 more rows"},{"path":"https://william-swl.github.io/baizer/index.html","id":"stat","dir":"","previous_headings":"","what":"stat","title":"Useful Functions for Data Processing","text":"statistical test returns extensible tibble fold change calculation returns extensible tibble","code":"stat_test(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 24 × 11 #>    clarity .y.   group1 group2    n1    n2 statistic     p p.adj p.adj…¹ p.sig…² #>    <chr>   <chr> <chr>  <chr>  <int> <int>     <dbl> <dbl> <dbl> <chr>   <chr>   #>  1 I1      price Fair   Good       5     5        18 0.31  0.62  ns      NS      #>  2 I1      price Fair   Ideal      5     4        11 0.905 0.905 ns      NS      #>  3 I1      price Good   Ideal      5     4         4 0.19  0.57  ns      NS      #>  4 IF      price Fair   Good       4     5        18 0.064 0.177 ns      NS      #>  5 IF      price Fair   Ideal      4     4        15 0.059 0.177 ns      NS      #>  6 IF      price Good   Ideal      5     4        10 1     1     ns      NS      #>  7 SI1     price Fair   Good       5     4        10 1     1     ns      NS      #>  8 SI1     price Fair   Ideal      5     5        13 1     1     ns      NS      #>  9 SI1     price Good   Ideal      4     5         6 0.413 1     ns      NS      #> 10 SI2     price Fair   Good       4     4        15 0.057 0.171 ns      NS      #> # … with 14 more rows, and abbreviated variable names ¹​p.adj.signif, ²​p.signif stat_fc(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 72 × 7 #>    clarity group1 group2    y1    y2    fc fc_fmt #>    <chr>   <chr>  <chr>  <dbl> <dbl> <dbl> <chr>  #>  1 SI1     Fair   Fair   5844. 5844.  1    1.0x   #>  2 SI1     Fair   Ideal  5844. 3877.  1.51 1.5x   #>  3 SI1     Fair   Good   5844. 3227.  1.81 1.8x   #>  4 VS2     Good   Good   5582. 5582.  1    1.0x   #>  5 VS2     Good   Ideal  5582. 3024.  1.85 1.8x   #>  6 VS2     Good   Fair   5582. 3529.  1.58 1.6x   #>  7 VVS1    Ideal  Ideal  4652. 4652.  1    1.0x   #>  8 VVS1    Ideal  Good   4652. 2810.  1.66 1.7x   #>  9 VVS1    Ideal  Fair   4652. 2184   2.13 2.1x   #> 10 SI2     Ideal  Ideal  4267. 4267.  1    1.0x   #> # … with 62 more rows"},{"path":"https://william-swl.github.io/baizer/index.html","id":"io","dir":"","previous_headings":"","what":"IO","title":"Useful Functions for Data Processing","text":"load packages batch get command line arguments detect whether directory empty recursively, detect whether file empty recursively write tibble, list tibbles excel file fetch remote files via sftp","code":"baizer::pkglib(dplyr, purrr, tidyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union cmdargs() #> $wd #> [1] \"/home/william/rpkg/baizer\" #>  #> $R_env #> [1] \"/home/william/software/mambaforge/envs/plutor/lib/R/bin/exec/R\" #>  #> $script_path #> character(0) #>  #> $script_dir #> character(0) #>  #> $env_configs #> [1] \"--slave\"                                #> [2] \"--no-save\"                              #> [3] \"--no-restore\"                           #> [4] \"-f\"                                     #> [5] \"/tmp/RtmpAvIOXB/callr-scr-29a97f7a218a\"  cmdargs(\"R_env\") #> [1] \"/home/william/software/mambaforge/envs/plutor/lib/R/bin/exec/R\" # create an empty directory dir.create(\"some/deep/path/in/a/folder\", recursive = TRUE) empty_dir(\"some/deep/path/in/a/folder\") #> [1] TRUE  # create an empty file file.create(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE empty_dir(\"some/deep/path/in/a/folder\") #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] TRUE  # create a file with only character of length 0 write(\"\", \"some/deep/path/in/a/folder/there_is_a_file.txt\") empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE  # clean unlink(\"some\", recursive = TRUE) # write_excel(mini_diamond, \"mini_diamond.xlsx\")  # Ldf <- list(mini_diamond[1:3, ], mini_diamond[4:6, ]) # write_excel(Ldf, '2sheets.xlsx') # sftp_con <- sftp_connect(server='remote_host', port=22, #                         user='username', password = \"password\", wd='~') # # sftp_download(sftp_con, #    path=c('t1.txt', 't2.txt'), #    to=c('path1.txt', 'path2.txt') # )"},{"path":"https://william-swl.github.io/baizer/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Useful Functions for Data Processing","text":"Please note baizer project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":null,"dir":"Reference","previous_headings":"","what":"expand a number vector according to the adjacent two numbers — adjacent_div","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"expand number vector according adjacent two numbers","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"","code":"adjacent_div(v, n_div = 10, .unique = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"v number vector n_div many divisions expanded two numbers .unique keep unique numbers","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"new number vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"","code":"adjacent_div(10^c(1:3), n_div = 10) #>  [1]   10   20   30   40   50   60   70   80   90  100  100  200  300  400  500 #> [16]  600  700  800  900 1000"},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"whether the expression is an atomic one — atomic_expr","title":"whether the expression is an atomic one — atomic_expr","text":"whether expression atomic one","code":""},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"whether the expression is an atomic one — atomic_expr","text":"","code":"atomic_expr(ex)"},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"whether the expression is an atomic one — atomic_expr","text":"ex expression","code":""},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"whether the expression is an atomic one — atomic_expr","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"whether the expression is an atomic one — atomic_expr","text":"","code":"atomic_expr(rlang::expr(x)) #> [1] TRUE  atomic_expr(rlang::expr(!x)) #> [1] TRUE  atomic_expr(rlang::expr(x + y)) #> [1] TRUE  atomic_expr(rlang::expr(x > 1)) #> [1] TRUE  atomic_expr(rlang::expr(!x + y)) #> [1] FALSE  atomic_expr(rlang::expr(x > 1 | y < 2)) #> [1] FALSE"},{"path":"https://william-swl.github.io/baizer/reference/baizer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"baizer: Useful Functions for Data Processing — baizer-package","title":"baizer: Useful Functions for Data Processing — baizer-package","text":"ancient Chinese mythology, Bai Ze divine creature knows needs everything. 'baizer' provides data processing functions frequently used author. Hope package also knows want!","code":""},{"path":[]},{"path":"https://william-swl.github.io/baizer/reference/baizer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"baizer: Useful Functions for Data Processing — baizer-package","text":"Maintainer: William Song william_swl@163.com","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper of tibble::column_to_rownames — c2r","title":"wrapper of tibble::column_to_rownames — c2r","text":"wrapper tibble::column_to_rownames","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper of tibble::column_to_rownames — c2r","text":"","code":"c2r(df, col = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper of tibble::column_to_rownames — c2r","text":"df tibble col col name","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper of tibble::column_to_rownames — c2r","text":"data.frame","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper of tibble::column_to_rownames — c2r","text":"","code":"mini_diamond %>% c2r(\"id\") #>        carat   cut clarity price    x    y #> id-1    1.02  Fair     SI1  3027 6.25 6.18 #> id-2    1.51  Good     VS2 11746 7.27 7.18 #> id-3    0.52 Ideal    VVS1  2029 5.15 5.18 #> id-4    1.54 Ideal     SI2  9452 7.43 7.45 #> id-5    0.72 Ideal     VS1  2498 5.73 5.77 #> id-6    2.02  Fair     SI2 14080 8.33 8.37 #> id-7    0.27  Good    VVS1   752 4.10 4.07 #> id-8    0.51  Good     SI2  1029 5.05 5.08 #> id-9    1.01 Ideal     SI1  5590 6.43 6.40 #> id-10   0.70  Fair    VVS1  1691 5.56 5.41 #> id-11   1.02  Good    VVS1  7861 6.37 6.40 #> id-12   0.71  Fair      IF  3205 5.87 5.81 #> id-13   0.56 Ideal     SI1  1633 5.31 5.32 #> id-14   0.30 Ideal    VVS2   812 4.33 4.39 #> id-15   0.28  Good      IF   612 4.09 4.12 #> id-16   0.41  Good      I1   467 4.70 4.74 #> id-17   0.97 Ideal      I1  2239 6.40 6.43 #> id-18   0.34  Fair    VVS1  1012 4.80 4.76 #> id-19   0.59 Ideal    VVS2  2155 5.34 5.39 #> id-20   1.20  Fair      I1  3011 6.61 6.54 #> id-21   0.40  Good    VVS1  1080 4.71 4.73 #> id-22   0.90  Good     VS2  3246 6.16 6.07 #> id-23   0.70  Fair      I1  1158 5.64 5.50 #> id-24   0.92  Good     VS2  4247 6.11 6.17 #> id-25   2.10  Fair     SI2 15827 7.97 7.92 #> id-26   0.31 Ideal     VS1   717 4.36 4.41 #> id-27   1.13  Good     SI2  4998 6.93 6.88 #> id-28   2.02  Fair      I1  6346 7.87 7.80 #> id-29   0.72 Ideal     SI2  2300 5.72 5.78 #> id-30   0.52  Fair    VVS2  1401 5.26 5.20 #> id-31   1.03 Ideal    VVS1  8398 6.54 6.50 #> id-32   2.00  Fair      I1  5667 7.78 7.74 #> id-33   1.21  Good     SI1  5252 6.63 6.71 #> id-34   1.14  Good      I1  2327 6.63 6.55 #> id-35   1.00 Ideal    VVS1  6535 6.37 6.41 #> id-36   1.00  Fair     VS1  6115 6.26 6.21 #> id-37   0.51 Ideal    VVS1  2812 5.15 5.11 #> id-38   1.09 Ideal     VS2  5421 6.62 6.67 #> id-39   0.30 Ideal      IF   863 4.33 4.36 #> id-40   1.52  Fair     SI2  7388 7.23 7.19 #> id-41   0.98 Ideal     SI2  3873 6.35 6.39 #> id-42   0.32  Good     SI1   589 4.33 4.35 #> id-43   1.12  Fair     VS1  5487 6.48 6.52 #> id-44   0.70  Good     VS2  3087 5.49 5.56 #> id-45   0.47  Fair      IF  2211 5.09 4.98 #> id-46   0.34  Fair    VVS1  1040 4.72 4.77 #> id-47   1.10 Ideal     SI1  5370 6.66 6.70 #> id-48   2.01  Fair      I1  7294 8.30 8.19 #> id-49   2.16 Ideal      I1  8709 8.31 8.26 #> id-50   1.00  Good     SI1  4851 6.27 6.31 #> id-51   1.00  Good    VVS2  6748 6.32 6.30 #> id-52   0.72  Fair     VS2  2306 5.66 5.71 #> id-53   0.33  Good      IF  1052 4.57 4.55 #> id-54   0.40 Ideal    VVS2   931 4.72 4.75 #> id-55   0.71  Fair    VVS1  3062 5.67 5.57 #> id-56   0.40  Good      IF  1120 4.75 4.80 #> id-57   0.30 Ideal      IF   863 4.32 4.34 #> id-58   0.90  Fair    VVS2  3288 6.10 6.12 #> id-59   0.91  Fair    VVS1  4115 6.38 6.40 #> id-60   0.29 Ideal    VVS2   607 4.27 4.29 #> id-61   0.30  Good      IF   631 4.23 4.30 #> id-62   0.46  Good      IF  1806 5.12 5.18 #> id-63   1.35  Fair     VS2  5625 6.98 6.93 #> id-64   1.01  Fair     SI1  4480 6.34 6.29 #> id-65   0.63  Fair     SI1  1952 5.36 5.41 #> id-66   0.90  Fair     VS2  2815 6.08 6.04 #> id-67   0.58 Ideal     SI2  1442 5.40 5.36 #> id-68   2.32  Fair     SI1 18026 8.47 8.31 #> id-69   0.40  Good      I1   491 4.64 4.68 #> id-70   0.90  Fair     VS2  4277 6.26 6.29 #> id-71   0.97 Ideal      I1  2370 6.34 6.28 #> id-72   0.42  Good    VVS2  1042 4.72 4.78 #> id-73   0.40 Ideal      IF  1229 4.73 4.76 #> id-74   0.45  Good    VVS1  1548 4.85 4.78 #> id-75   0.71  Good     SI1  2215 5.62 5.59 #> id-76   0.64  Fair     SI1  1733 5.65 5.39 #> id-77   0.71  Fair     VS2  2623 5.83 5.81 #> id-78   0.70 Ideal     VS1  3535 5.69 5.72 #> id-79   1.08  Fair    VVS2  5171 6.90 6.80 #> id-80   0.80 Ideal     VS1  4070 5.91 5.96 #> id-81   0.41  Good     VS1   954 4.77 4.79 #> id-82   0.90  Good      I1  2143 6.09 6.05 #> id-83   0.73 Ideal    VVS1  3487 5.77 5.82 #> id-84   0.50 Ideal     SI1  1415 5.11 5.05 #> id-85   1.00  Fair     VS1  7083 6.77 6.71 #> id-86   0.31 Ideal      IF   891 4.38 4.40 #> id-87   0.34  Good     VS1   596 4.40 4.44 #> id-88   0.31 Ideal     VS2   628 4.38 4.34 #> id-89   0.30  Fair      IF  1208 4.47 4.35 #> id-90   1.13 Ideal      I1  3678 6.65 6.69 #> id-91   1.73  Good      I1  8370 7.60 7.56 #> id-92   1.51  Good    VVS2 14654 7.18 7.24 #> id-93   1.09 Ideal     SI1  5376 6.60 6.64 #> id-94   0.28 Ideal     VS1   462 4.19 4.23 #> id-95   0.37  Fair      IF  1440 4.68 4.73 #> id-96   0.32 Ideal    VVS2   854 4.45 4.46 #> id-97   2.61  Good     SI2 13784 8.66 8.57 #> id-98   1.00  Fair    VVS2  4312 6.27 6.23 #> id-99   2.00  Fair     SI2 15351 7.63 7.59 #> id-100  1.20  Good     SI2  6344 6.72 6.68"},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":null,"dir":"Reference","previous_headings":"","what":"get the command line arguments — cmdargs","title":"get the command line arguments — cmdargs","text":"get command line arguments","code":""},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the command line arguments — cmdargs","text":"","code":"cmdargs(x = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the command line arguments — cmdargs","text":"x one 'wd, R_env, script_path, script_dir, env_configs'","code":""},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the command line arguments — cmdargs","text":"list arguments, single value select argument","code":""},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get the command line arguments — cmdargs","text":"","code":"cmdargs() #> $wd #> [1] \"/home/runner/work/baizer/baizer/docs/reference\" #>  #> $R_env #> [1] \"/opt/R/4.2.3/lib/R/bin/exec/R\" #>  #> $script_path #> [1] \"/home/runner/work/_temp/f88ca910-ac9b-4044-a2d1-7426b11bac19\" #>  #> $script_dir #> [1] \"/home/runner/work/_temp\" #>  #> $env_configs #> [1] \"--no-echo\"                                                           #> [2] \"--no-restore\"                                                        #> [3] \"--file=/home/runner/work/_temp/f88ca910-ac9b-4044-a2d1-7426b11bac19\" #>"},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"dump a named vector into character — collapse_vector","title":"dump a named vector into character — collapse_vector","text":"dump named vector character","code":""},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dump a named vector into character — collapse_vector","text":"","code":"collapse_vector(named_vector, front_name = TRUE, collapse = \",\")"},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dump a named vector into character — collapse_vector","text":"named_vector named vector front_name TRUE, put names former collapse collapse separator","code":""},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dump a named vector into character — collapse_vector","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dump a named vector into character — collapse_vector","text":"","code":"collapse_vector(c(e = 1:4), front_name = TRUE, collapse = \";\") #> [1] \"e1(1);e2(2);e3(3);e4(4)\""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"detect possible duplication vector, ignore case, blank special character","code":""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"","code":"detect_dup(vector, index = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"vector vector possibly duplication index return duplication index","code":""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"duplication sub-vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"","code":"detect_dup(c(\"a\", \"C_\", \"c -\", \"#A\")) #> [1] \"a\"   \"#A\"  \"C_\"  \"c -\""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":null,"dir":"Reference","previous_headings":"","what":"the index of different character — diff_index","title":"the index of different character — diff_index","text":"index different character","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the index of different character — diff_index","text":"","code":"diff_index(s1, s2, nth = NULL, ignore_case = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the index of different character — diff_index","text":"s1 string1 s2 string2 nth just return nth index ignore_case ignore upper lower cases","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the index of different character — diff_index","text":"list different character indices","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the index of different character — diff_index","text":"","code":"diff_index(\"AAAA\", \"ABBA\") #> [[1]] #> [1] 2 3 #>"},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"detect whether directory is empty recursively — empty_dir","title":"detect whether directory is empty recursively — empty_dir","text":"detect whether directory empty recursively","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect whether directory is empty recursively — empty_dir","text":"","code":"empty_dir(dir)"},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect whether directory is empty recursively — empty_dir","text":"dir directory","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect whether directory is empty recursively — empty_dir","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect whether directory is empty recursively — empty_dir","text":"","code":"# create an empty directory dir.create(\"some/deep/path/in/a/folder\", recursive = TRUE) empty_dir(\"some/deep/path/in/a/folder\") #> [1] TRUE  # create an empty file file.create(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE empty_dir(\"some/deep/path/in/a/folder\") #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] TRUE  # create a file with only character of length 0 write(\"\", \"some/deep/path/in/a/folder/there_is_a_file.txt\") empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE  # clean unlink(\"some\", recursive = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":null,"dir":"Reference","previous_headings":"","what":"detect whether file is empty recursively — empty_file","title":"detect whether file is empty recursively — empty_file","text":"detect whether file empty recursively","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect whether file is empty recursively — empty_file","text":"","code":"empty_file(path, strict = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect whether file is empty recursively — empty_file","text":"path path file strict FALSE default. TRUE, file one character length 0 considered empty","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect whether file is empty recursively — empty_file","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect whether file is empty recursively — empty_file","text":"","code":"# create an empty directory dir.create(\"some/deep/path/in/a/folder\", recursive = TRUE) empty_dir(\"some/deep/path/in/a/folder\") #> [1] TRUE  # create an empty file file.create(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE empty_dir(\"some/deep/path/in/a/folder\") #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] TRUE  # create a file with only character of length 0 write(\"\", \"some/deep/path/in/a/folder/there_is_a_file.txt\") empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE  # clean unlink(\"some\", recursive = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"pileup the subexpressions which is atomic — expr_pileup","title":"pileup the subexpressions which is atomic — expr_pileup","text":"pileup subexpressions atomic","code":""},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pileup the subexpressions which is atomic — expr_pileup","text":"","code":"expr_pileup(ex)"},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pileup the subexpressions which is atomic — expr_pileup","text":"ex expression","code":""},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pileup the subexpressions which is atomic — expr_pileup","text":"character vector subexpressions","code":""},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pileup the subexpressions which is atomic — expr_pileup","text":"","code":"ex <- rlang::expr(a == 2 & b == 3 | !b & x + 2) expr_pileup(ex) #> [1] \"|\"      \"&\"      \"a == 2\" \"b == 3\" \"&\"      \"!b\"     \"x + 2\""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":null,"dir":"Reference","previous_headings":"","what":"extract key and values for a character vector — extract_kv","title":"extract key and values for a character vector — extract_kv","text":"extract key values character vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract key and values for a character vector — extract_kv","text":"","code":"extract_kv(v, sep = \": \", key_loc = 1, value_loc = 2)"},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract key and values for a character vector — extract_kv","text":"v character vector sep separator key value key_loc key location value_loc value location","code":""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract key and values for a character vector — extract_kv","text":"named character vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract key and values for a character vector — extract_kv","text":"","code":"extract_kv(c(\"x: 1\", \"y: 2\")) #>   x   y  #> \"1\" \"2\""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":null,"dir":"Reference","previous_headings":"","what":"fancy count to show an extended column — fancy_count","title":"fancy count to show an extended column — fancy_count","text":"fancy count show extended column","code":""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fancy count to show an extended column — fancy_count","text":"","code":"fancy_count(df, ..., ext = NULL, ext_fmt = \"count\", sort = FALSE, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fancy count to show an extended column — fancy_count","text":"df tibble ... arguments dplyr::count() ext extended column ext_fmt count|ratio|clean, output format extended column sort sort frequency digits ext_fmt=ratio, digits ratio","code":""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fancy count to show an extended column — fancy_count","text":"count tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fancy count to show an extended column — fancy_count","text":"","code":"fancy_count(mini_diamond, cut, ext = clarity) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"ratio\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                      #>   <chr> <int> <dbl> <chr>                                                        #> 1 Fair     35  0.35 I1(0.14),IF(0.11),SI1(0.14),SI2(0.11),VS1(0.09),VS2(0.14),V… #> 2 Good     31  0.31 I1(0.16),IF(0.16),SI1(0.13),SI2(0.13),VS1(0.06),VS2(0.13),V… #> 3 Ideal    34  0.34 I1(0.12),IF(0.12),SI1(0.15),SI2(0.12),VS1(0.15),VS2(0.06),V…  fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"clean\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                         #>   <chr> <int> <dbl> <chr>                           #> 1 Fair     35  0.35 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 2 Good     31  0.31 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 3 Ideal    34  0.34 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2  fancy_count(mini_diamond, cut, ext = clarity, sort = FALSE) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  fancy_count(mini_diamond, cut, clarity, ext = id) %>% head(5) #> # A tibble: 5 × 5 #>   cut   clarity     n     r id                                           #>   <chr> <chr>   <int> <dbl> <chr>                                        #> 1 Fair  I1          5  0.05 id-20(1),id-23(1),id-28(1),id-32(1),id-48(1) #> 2 Fair  IF          4  0.04 id-12(1),id-45(1),id-89(1),id-95(1)          #> 3 Fair  SI1         5  0.05 id-1(1),id-64(1),id-65(1),id-68(1),id-76(1)  #> 4 Fair  SI2         4  0.04 id-25(1),id-40(1),id-6(1),id-99(1)           #> 5 Fair  VS1         3  0.03 id-36(1),id-43(1),id-85(1)"},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":null,"dir":"Reference","previous_headings":"","what":"fetch character from strings — fetch_char","title":"fetch character from strings — fetch_char","text":"fetch character strings","code":""},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetch character from strings — fetch_char","text":"","code":"fetch_char(s, index_list, na.rm = FALSE, collapse = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetch character from strings — fetch_char","text":"s strings index_list index nth character, can output diff_index same_index na.rm remove NA values results collapse optional string used combine characters string","code":""},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetch character from strings — fetch_char","text":"list characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fetch character from strings — fetch_char","text":"","code":"fetch_char(rep(\"ABC\", 3), list(1, 2, 3)) #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"B\" #>  #> [[3]] #> [1] \"C\" #>"},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":null,"dir":"Reference","previous_headings":"","what":"apply tbflt on dplyr filter — filterC","title":"apply tbflt on dplyr filter — filterC","text":"apply tbflt dplyr filter","code":""},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply tbflt on dplyr filter — filterC","text":"","code":"filterC(.data, tbflt = NULL, .by = NULL, usecol = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply tbflt on dplyr filter — filterC","text":".data tibble tbflt tbflt object .group , .argument dplyr::filter usecol TRUE (default), use default behavior dplyr::filter(), allows usage variable colnames, filter data column. FALSE, check whether variables right side ==,>,<,>=,<= names columns raise error, sake predictable results. can always ignore argument know use .env !!","code":""},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply tbflt on dplyr filter — filterC","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply tbflt on dplyr filter — filterC","text":"","code":"c1 <- tbflt(cut == \"Fair\")  c2 <- tbflt(x > 8)  mini_diamond %>%   filterC(c1) %>%   head(5) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 3 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> 4 id-12  0.71 Fair  IF       3205  5.87  5.81 #> 5 id-18  0.34 Fair  VVS1     1012  4.8   4.76  mini_diamond %>% filterC(c1 & c2) #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-68  2.32 Fair  SI1     18026  8.47  8.31    x <- 8 cond <- tbflt(y > x)  # variable `x` not used because of column `x` in `mini_diamond` filterC(mini_diamond, cond) #> # A tibble: 53 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  7 id-13  0.56 Ideal SI1      1633  5.31  5.32 #>  8 id-14  0.3  Ideal VVS2      812  4.33  4.39 #>  9 id-15  0.28 Good  IF        612  4.09  4.12 #> 10 id-16  0.41 Good  I1        467  4.7   4.74 #> # ℹ 43 more rows  # will raise error because `x`  is on the right side of `>` # filterC(mini_diamond, cond, usecol=FALSE)  # if you know how to use `.env` or `!!`, forget argument `usecol`! cond <- tbflt(y > !!x) filterC(mini_diamond, cond) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57  cond <- tbflt(y > .env$x) filterC(mini_diamond, cond) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57"},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"trans fixed string into regular expression string — fix_to_regex","title":"trans fixed string into regular expression string — fix_to_regex","text":"trans fixed string regular expression string","code":""},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans fixed string into regular expression string — fix_to_regex","text":"","code":"fix_to_regex(p)"},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans fixed string into regular expression string — fix_to_regex","text":"p raw fixed pattern","code":""},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans fixed string into regular expression string — fix_to_regex","text":"regex pattern","code":""},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans fixed string into regular expression string — fix_to_regex","text":"","code":"fix_to_regex(\"ABC|?(*)\") #> [1] \"ABC\\\\|\\\\?\\\\(\\\\*\\\\)\""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"from float number to percent number — float_to_percent","title":"from float number to percent number — float_to_percent","text":"float number percent number","code":""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from float number to percent number — float_to_percent","text":"","code":"float_to_percent(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from float number to percent number — float_to_percent","text":"x number digits hold n digits decimal point","code":""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from float number to percent number — float_to_percent","text":"percent character x","code":""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from float number to percent number — float_to_percent","text":"","code":"float_to_percent(0.12) #> [1] \"12.00%\""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"farthest point sampling (FPS) for a vector — fps_vector","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"farthest point sampling (FPS) vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"","code":"fps_vector(v, n, method = \"round\")"},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"v vector n sample size method round|floor|ceiling, method used trans integer","code":""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"sampled vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"","code":"fps_vector(1:10, 4) #> [1]  1  4  7 10"},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"geometric mean — geom_mean","title":"geometric mean — geom_mean","text":"geometric mean","code":""},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geometric mean — geom_mean","text":"","code":"geom_mean(x, na.rm = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geometric mean — geom_mean","text":"x value na.rm remove NA ","code":""},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geometric mean — geom_mean","text":"geometric mean value","code":""},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geometric mean — geom_mean","text":"","code":"geom_mean(1, 9) #> [1] 1"},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"not equal calculation operator, support NA — %neq%","title":"not equal calculation operator, support NA — %neq%","text":"equal calculation operator, support NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"not equal calculation operator, support NA — %neq%","text":"","code":"x %neq% y"},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"not equal calculation operator, support NA — %neq%","text":"x value x y value y","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"not equal calculation operator, support NA — %neq%","text":"logical value, TRUE x y equal","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"not equal calculation operator, support NA — %neq%","text":"","code":"1 %neq% NA #> [1] TRUE"},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"not in calculation operator — %nin%","title":"not in calculation operator — %nin%","text":"calculation operator","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"not in calculation operator — %nin%","text":"","code":"left %nin% right"},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"not in calculation operator — %nin%","text":"left left element right right element","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"not in calculation operator — %nin%","text":"logical value, TRUE left right","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"not in calculation operator — %nin%","text":"","code":"0 %nin% 1:4 #> [1] TRUE"},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"separate numeric vector into bins — hist_bins","title":"separate numeric vector into bins — hist_bins","text":"separate numeric vector bins","code":""},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"separate numeric vector into bins — hist_bins","text":"","code":"hist_bins(vector, bins = 10, sort = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"separate numeric vector into bins — hist_bins","text":"vector numeric vector bins bins number, defaults 10 sort sort result tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"separate numeric vector into bins — hist_bins","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"separate numeric vector into bins — hist_bins","text":"","code":"vector <- dplyr::pull(mini_diamond, price, id)  hist_bins(vector, bins = 20) #> # A tibble: 100 × 5 #>    id    value  start    end   bin #>    <chr> <int>  <dbl>  <dbl> <int> #>  1 id-1   3027  2218.  3097.     3 #>  2 id-2  11746 11000. 11879.    13 #>  3 id-3   2029  1340.  2218.     2 #>  4 id-4   9452  9244  10122.    11 #>  5 id-5   2498  2218.  3097.     3 #>  6 id-6  14080 13635  14513.    16 #>  7 id-7    752   462   1340.     1 #>  8 id-8   1029   462   1340.     1 #>  9 id-9   5590  4853   5731.     6 #> 10 id-10  1691  1340.  2218.     2 #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":null,"dir":"Reference","previous_headings":"","what":"if a number only have zeros — is.zero","title":"if a number only have zeros — is.zero","text":"number zeros","code":""},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"if a number only have zeros — is.zero","text":"","code":"is.zero(x)"},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"if a number only have zeros — is.zero","text":"x number","code":""},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"if a number only have zeros — is.zero","text":"zero ","code":""},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"if a number only have zeros — is.zero","text":"","code":"is.zero(c(\"0.000\", \"0.102\", NA)) #> [1]  TRUE FALSE    NA"},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal tibble dataset adjusted from diamond — mini_diamond","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"Minimal tibble dataset adjusted diamond","code":""},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"","code":"mini_diamond"},{"path":[]},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":"mini-diamond","dir":"Reference","previous_headings":"","what":"mini_diamond","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"data frame 100 rows 7 columns: id unique id cut, clarity 2 category variables carat, price, x, y 4 continuous variables","code":""},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"adjusted ggplot2","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":null,"dir":"Reference","previous_headings":"","what":"move selected rows to target location — move_row","title":"move selected rows to target location — move_row","text":"move selected rows target location","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"move selected rows to target location — move_row","text":"","code":"move_row(df, rows, .after = FALSE, .before = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"move selected rows to target location — move_row","text":"df tibble rows selected rows indexes .TRUE move selected rows last row, can pass target row index .TRUE move selected rows first row, can pass target row index","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"move selected rows to target location — move_row","text":"reordered tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"move selected rows to target location — move_row","text":"","code":"move_row(mini_diamond, 3:5, .after = 8) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  4 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  7 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  8 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"wrapper functions process number string prefix suffix","code":""},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"","code":"number_fun_wrapper(   x,   fun = ~.x,   prefix_ext = NULL,   suffix_ext = NULL,   verbose = FALSE )"},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"x number string vector prefix suffix fun process function prefix_ext prefix extension suffix_ext suffix extension verbose print details","code":""},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"processed number prefix suffix","code":""},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"","code":"number_fun_wrapper(\">=2.134%\", function(x) round(x, 2)) #> [1] \">=2.13%\""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"slice a tibble by an ordered vector — ordered_slice","title":"slice a tibble by an ordered vector — ordered_slice","text":"slice tibble ordered vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slice a tibble by an ordered vector — ordered_slice","text":"","code":"ordered_slice(df, by, ordered_vector, na.rm = FALSE, dup.rm = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"slice a tibble by an ordered vector — ordered_slice","text":"df tibble slice column, value must duplicated value ordered_vector ordered vector na.rm remove NA unknown values ordered vector dup.rm remove duplication values ordered vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"slice a tibble by an ordered vector — ordered_slice","text":"sliced tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"slice a tibble by an ordered vector — ordered_slice","text":"","code":"ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\")) #> # A tibble: 2 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18"},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":null,"dir":"Reference","previous_headings":"","what":"from percent number to float number — percent_to_float","title":"from percent number to float number — percent_to_float","text":"percent number float number","code":""},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from percent number to float number — percent_to_float","text":"","code":"percent_to_float(x, digits = 2, to_double = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from percent number to float number — percent_to_float","text":"x percent number character digits hold n digits decimal point to_double use double output","code":""},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from percent number to float number — percent_to_float","text":"float character double x","code":""},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from percent number to float number — percent_to_float","text":"","code":"percent_to_float(\"12%\") #> [1] \"0.12\""},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":null,"dir":"Reference","previous_headings":"","what":"load packages as a batch — pkglib","title":"load packages as a batch — pkglib","text":"load packages batch","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load packages as a batch — pkglib","text":"","code":"pkglib(...)"},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load packages as a batch — pkglib","text":"... pkgs","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load packages as a batch — pkglib","text":"nothing","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load packages as a batch — pkglib","text":"","code":"baizer::pkglib(dplyr, purrr, tidyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union"},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper of tibble::rownames_to_column — r2c","title":"wrapper of tibble::rownames_to_column — r2c","text":"wrapper tibble::rownames_to_column","code":""},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper of tibble::rownames_to_column — r2c","text":"","code":"r2c(df, col = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper of tibble::rownames_to_column — r2c","text":"df tibble col col name","code":""},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper of tibble::rownames_to_column — r2c","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper of tibble::rownames_to_column — r2c","text":"","code":"mini_diamond %>%   c2r(\"id\") %>%   r2c(\"id\") #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":null,"dir":"Reference","previous_headings":"","what":"remove columns by the ratio of NA — remove_nacol","title":"remove columns by the ratio of NA — remove_nacol","text":"remove columns ratio NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove columns by the ratio of NA — remove_nacol","text":"","code":"remove_nacol(df, max_ratio = 1)"},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove columns by the ratio of NA — remove_nacol","text":"df tibble max_ratio max NA ratio, default 1 remove columns NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove columns by the ratio of NA — remove_nacol","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove columns by the ratio of NA — remove_nacol","text":"","code":"# remove_nacol(df)"},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":null,"dir":"Reference","previous_headings":"","what":"remove rows by the ratio of NA — remove_narow","title":"remove rows by the ratio of NA — remove_narow","text":"remove rows ratio NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove rows by the ratio of NA — remove_narow","text":"","code":"remove_narow(df, max_ratio = 1)"},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove rows by the ratio of NA — remove_narow","text":"df tibble max_ratio max NA ratio, default 1 remove rows NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove rows by the ratio of NA — remove_narow","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove rows by the ratio of NA — remove_narow","text":"","code":"# remove_narow(df)"},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":null,"dir":"Reference","previous_headings":"","what":"from float number to fixed digits character — round_string","title":"from float number to fixed digits character — round_string","text":"float number fixed digits character","code":""},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from float number to fixed digits character — round_string","text":"","code":"round_string(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from float number to fixed digits character — round_string","text":"x number digits hold n digits decimal point","code":""},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from float number to fixed digits character — round_string","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from float number to fixed digits character — round_string","text":"","code":"round_string(1.1, 2) #> [1] \"1.10\""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":null,"dir":"Reference","previous_headings":"","what":"the index of identical character — same_index","title":"the index of identical character — same_index","text":"index identical character","code":""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the index of identical character — same_index","text":"","code":"same_index(s1, s2, nth = NULL, ignore_case = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the index of identical character — same_index","text":"s1 string1 s2 string2 nth just return nth index ignore_case ignore upper lower cases","code":""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the index of identical character — same_index","text":"list identical character indices","code":""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the index of identical character — same_index","text":"","code":"same_index(\"AAAA\", \"ABBA\") #> [[1]] #> [1] 1 4 #>"},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"connection parameters to remote server via sftp — sftp_connect","title":"connection parameters to remote server via sftp — sftp_connect","text":"connection parameters remote server via sftp","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connection parameters to remote server via sftp — sftp_connect","text":"","code":"sftp_connect(   server = \"localhost\",   port = 22,   user = NULL,   password = NULL,   wd = \"~\" )"},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connection parameters to remote server via sftp — sftp_connect","text":"server remote server port SSH port, 22 default user username password password wd workdir","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"connection parameters to remote server via sftp — sftp_connect","text":"sftp_connection object","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"connection parameters to remote server via sftp — sftp_connect","text":"","code":"# sftp_con <- sftp_connect(server='remote_host', port=22, #     user='username', password = \"password\", wd='~')"},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":null,"dir":"Reference","previous_headings":"","what":"download file from remote server via sftp — sftp_download","title":"download file from remote server via sftp — sftp_download","text":"download file remote server via sftp","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download file from remote server via sftp — sftp_download","text":"","code":"sftp_download(sftp_con, path = NULL, to = basename(path))"},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download file from remote server via sftp — sftp_download","text":"sftp_con sftp_connection created sftp_connect() path remote file path local target path","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"download file from remote server via sftp — sftp_download","text":"","code":"# sftp_download(sftp_con, #   path=c('t1.txt', 't2.txt'), #   to=c('path1.txt', 'path2.txt')"},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":null,"dir":"Reference","previous_headings":"","what":"signif or round string depend on the character length — signif_round_string","title":"signif or round string depend on the character length — signif_round_string","text":"signif round string depend character length","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"signif or round string depend on the character length — signif_round_string","text":"","code":"signif_round_string(x, digits = 2, format = \"short\")"},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"signif or round string depend on the character length — signif_round_string","text":"x number digits signif round digits format short long","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"signif or round string depend on the character length — signif_round_string","text":"signif round strings","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"signif or round string depend on the character length — signif_round_string","text":"","code":"signif_round_string(0.03851) #> [1] \"0.04\""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":null,"dir":"Reference","previous_headings":"","what":"from float number to fixed significant digits character — signif_string","title":"from float number to fixed significant digits character — signif_string","text":"float number fixed significant digits character","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from float number to fixed significant digits character — signif_string","text":"","code":"signif_string(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from float number to fixed significant digits character — signif_string","text":"x number digits hold n significant digits","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from float number to fixed significant digits character — signif_string","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from float number to fixed significant digits character — signif_string","text":"","code":"signif_string(1.1, 2) #> [1] \"1.1\""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":null,"dir":"Reference","previous_headings":"","what":"split a column and return a longer tibble — split_column","title":"split a column and return a longer tibble — split_column","text":"split column return longer tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split a column and return a longer tibble — split_column","text":"","code":"split_column(df, name_col, value_col, sep = \",\")"},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split a column and return a longer tibble — split_column","text":"df tibble name_col repeat name column value_col expand value column sep separator string","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split a column and return a longer tibble — split_column","text":"expanded tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split a column and return a longer tibble — split_column","text":"","code":"fancy_count(mini_diamond, cut, ext = clarity) %>%   split_column(name_col = cut, value_col = clarity) #> # A tibble: 24 × 2 #>    cut   clarity #>    <chr> <chr>   #>  1 Fair  I1(5)   #>  2 Fair  IF(4)   #>  3 Fair  SI1(5)  #>  4 Fair  SI2(4)  #>  5 Fair  VS1(3)  #>  6 Fair  VS2(5)  #>  7 Fair  VVS1(5) #>  8 Fair  VVS2(4) #>  9 Good  I1(5)   #> 10 Good  IF(5)   #> # ℹ 14 more rows"},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":null,"dir":"Reference","previous_headings":"","what":"split a path into ancestor paths recursively — split_path","title":"split a path into ancestor paths recursively — split_path","text":"split path ancestor paths recursively","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split a path into ancestor paths recursively — split_path","text":"","code":"split_path(path)"},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split a path into ancestor paths recursively — split_path","text":"path path split","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split a path into ancestor paths recursively — split_path","text":"character vectors ancestor paths","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split a path into ancestor paths recursively — split_path","text":"","code":"split_path(\"/home/someone/a/test/path.txt\") #> [[1]] #> [1] \"/home\"                         \"/home/someone\"                 #> [3] \"/home/someone/a\"               \"/home/someone/a/test\"          #> [5] \"/home/someone/a/test/path.txt\" #>"},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"fold change calculation which returns a extensible tibble — stat_fc","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"fold change calculation returns extensible tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"","code":"stat_fc(df, y, x, method = \"mean\", .by = NULL, signif_digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"df tibble y value x sample test group method 'mean'|'median'|'geom_mean', summary method .super-group signif_digits fold change signif digits","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"fold change result tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"","code":"stat_fc(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 72 × 7 #>    clarity group1 group2    y1    y2    fc fc_fmt #>    <chr>   <chr>  <chr>  <dbl> <dbl> <dbl> <chr>  #>  1 SI1     Fair   Fair   5844. 5844.  1    1.0x   #>  2 SI1     Fair   Ideal  5844. 3877.  1.51 1.5x   #>  3 SI1     Fair   Good   5844. 3227.  1.81 1.8x   #>  4 VS2     Good   Good   5582. 5582.  1    1.0x   #>  5 VS2     Good   Ideal  5582. 3024.  1.85 1.8x   #>  6 VS2     Good   Fair   5582. 3529.  1.58 1.6x   #>  7 VVS1    Ideal  Ideal  4652. 4652.  1    1.0x   #>  8 VVS1    Ideal  Good   4652. 2810.  1.66 1.7x   #>  9 VVS1    Ideal  Fair   4652. 2184   2.13 2.1x   #> 10 SI2     Ideal  Ideal  4267. 4267.  1    1.0x   #> # ℹ 62 more rows"},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"statistical test which returns a extensible tibble — stat_test","title":"statistical test which returns a extensible tibble — stat_test","text":"statistical test returns extensible tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"statistical test which returns a extensible tibble — stat_test","text":"","code":"stat_test(   df,   y,   x,   paired = FALSE,   alternative = \"two.sided\",   method = \"wilcoxon\",   .by = NULL,   ... )"},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"statistical test which returns a extensible tibble — stat_test","text":"df tibble y value x sample test group paired paired samples alternative one \"two.sided\" (default), \"greater\" \"less\" method test method, 'wilcoxon' default .super-group ... arguments passed function wilcox.test.","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"statistical test which returns a extensible tibble — stat_test","text":"test result tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"statistical test which returns a extensible tibble — stat_test","text":"","code":"stat_test(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 24 × 11 #>    clarity .y.   group1 group2    n1    n2 statistic     p p.adj p.adj.signif #>    <chr>   <chr> <chr>  <chr>  <int> <int>     <dbl> <dbl> <dbl> <chr>        #>  1 I1      price Fair   Good       5     5        18 0.31  0.62  ns           #>  2 I1      price Fair   Ideal      5     4        11 0.905 0.905 ns           #>  3 I1      price Good   Ideal      5     4         4 0.19  0.57  ns           #>  4 IF      price Fair   Good       4     5        18 0.064 0.177 ns           #>  5 IF      price Fair   Ideal      4     4        15 0.059 0.177 ns           #>  6 IF      price Good   Ideal      5     4        10 1     1     ns           #>  7 SI1     price Fair   Good       5     4        10 1     1     ns           #>  8 SI1     price Fair   Ideal      5     5        13 1     1     ns           #>  9 SI1     price Good   Ideal      4     5         6 0.413 1     ns           #> 10 SI2     price Fair   Good       4     4        15 0.057 0.171 ns           #> # ℹ 14 more rows #> # ℹ 1 more variable: p.signif <chr>"},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":null,"dir":"Reference","previous_headings":"","what":"create a tbflt object to save filter conditions — tbflt","title":"create a tbflt object to save filter conditions — tbflt","text":"tbflt() can save series filter conditions, support logical operating among conditions","code":""},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a tbflt object to save filter conditions — tbflt","text":"","code":"tbflt(x = expression(), .env = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a tbflt object to save filter conditions — tbflt","text":"x expression .env environment","code":""},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a tbflt object to save filter conditions — tbflt","text":"tbflt","code":""},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a tbflt object to save filter conditions — tbflt","text":"","code":"c1 <- tbflt(cut == \"Fair\")  c2 <- tbflt(x > 8)  !c1 #> <quosure> #> expr: ^!cut == \"Fair\" #> env:  0x56473613fc48  c1 | c2 #> <quosure> #> expr: ^cut == \"Fair\" | x > 8 #> env:  0x5647388f93c8  c1 & c2 #> <quosure> #> expr: ^cut == \"Fair\" & x > 8 #> env:  0x56473a27a168"},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"write a tibble into an excel file — write_excel","title":"write a tibble into an excel file — write_excel","text":"write tibble excel file","code":""},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write a tibble into an excel file — write_excel","text":"","code":"write_excel(df, filename, sheetname = NULL, creator = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write a tibble into an excel file — write_excel","text":"df tibble list tibbles filename output filename sheetname names sheets. given, use 'sheet1', names list creator creator","code":""},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"write a tibble into an excel file — write_excel","text":"return status","code":""},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write a tibble into an excel file — write_excel","text":"","code":"# write_excel(mini_diamond, \"mini_diamond.xlsx\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-030","dir":"Changelog","previous_headings":"","what":"baizer 0.3.0","title":"baizer 0.3.0","text":"CRAN release: 2023-03-10","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-020","dir":"Changelog","previous_headings":"","what":"baizer 0.2.0","title":"baizer 0.2.0","text":"CRAN release: 2023-03-03","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-010","dir":"Changelog","previous_headings":"","what":"baizer 0.1.0","title":"baizer 0.1.0","text":"CRAN release: 2023-01-10","code":""},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-0009017","dir":"Changelog","previous_headings":"","what":"baizer 0.0.0.9017","title":"baizer 0.0.0.9017","text":"Added NEWS.md file track changes package.","code":""}]
