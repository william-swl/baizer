[{"path":[]},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement william_swl@163.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://william-swl.github.io/baizer/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://william-swl.github.io/baizer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 baizer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://william-swl.github.io/baizer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Song. Author, maintainer.","code":""},{"path":"https://william-swl.github.io/baizer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Song W (2023). baizer: Useful Functions Data Processing. R package version 0.5.10, https://github.com/william-swl/baizer.","code":"@Manual{,   title = {baizer: Useful Functions for Data Processing},   author = {William Song},   year = {2023},   note = {R package version 0.5.10},   url = {https://github.com/william-swl/baizer}, }"},{"path":"https://william-swl.github.io/baizer/index.html","id":"baizer-","dir":"","previous_headings":"","what":"Useful Functions for Data Processing","title":"Useful Functions for Data Processing","text":"ancient Chinese mythology, Bai Ze divine creature knows needs everything. baizer provides data processing functions frequently used author. Hope package also knows want!","code":""},{"path":"https://william-swl.github.io/baizer/index.html","id":"installation","dir":"","previous_headings":"","what":"installation","title":"Useful Functions for Data Processing","text":"can install stable version baizer like : install development version baizer like :","code":"install.packages(\"baizer\") devtools::install_github(\"william-swl/baizer\")"},{"path":"https://william-swl.github.io/baizer/index.html","id":"basic-utils","dir":"","previous_headings":"","what":"basic utils","title":"Useful Functions for Data Processing","text":"load packages batch versions packages information packages use %nin% get ‘’ logical value use %neq% get NA supported ‘equal’ logical value NA/NULL dump vector string slice character vector index different character index character fetch character strings trans fixed string regular expression string detect possible duplication vector, ignore case, blank special character extract key values character vector farthest point sampling (FPS) vector regex match join matched parts string split vector list group chracter vector regex pattern sort function pileup another logical vector TRUE values first vector keep unique vector values names replace items list another generate characters trans range character seq characters return top n items highest frequency melt vector single value combine multiple vectors one","code":"pkglib(dplyr, purrr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union pkgver(dplyr, purrr) #> $dplyr #> [1] \"1.1.1\" #>  #> $purrr #> [1] \"1.0.1\"  # case-insensitive input pkgver(DplyR) #> $dplyr #> [1] \"1.1.1\" # pkginfo(dplyr)  # case-insensitive input # pkginfo(DplyR) 1 %nin% c(1, 2, 3) #> [1] FALSE  1 %nin% c(2, 3) #> [1] TRUE NA != 0 #> [1] NA  NA != NA #> [1] NA  NA %neq% 0 #> [1] TRUE  NA %neq% NA #> [1] FALSE not.na(NA) #> [1] FALSE  not.null(NULL) #> [1] FALSE collapse_vector(c(\"A\" = 2, \"B\" = 3, \"C\" = 4), front_name = TRUE, collapse = \";\") #> [1] \"A(2);B(3);C(4)\"  collapse_vector(c(\"A\" = 2, \"B\" = 3, \"C\" = 4), front_name = FALSE, collapse = \",\") #> [1] \"2(A),3(B),4(C)\" x <- c(\"A\", \"B\", \"C\", \"D\", \"E\") slice_char(x, \"A\", \"D\") #> [1] \"A\" \"B\" \"C\" \"D\" slice_char(x, \"D\", \"A\") #> [1] \"D\" \"C\" \"B\" \"A\"  x <- c(\"A\", \"B\", \"C\", \"C\", \"A\", \"D\", \"D\", \"E\", \"A\") slice_char(x, \"B\", \"E\") #> [1] \"B\" \"C\" \"C\" \"A\" \"D\" \"D\" \"E\" # duplicated element as boundary will throw an error # slice_char(x, 'A', 'E') # unique=TRUE to remove the duplicated boundary characters slice_char(x, \"A\", \"E\", unique = TRUE) #> [1] \"A\" \"B\" \"C\" \"C\" \"D\" \"D\" \"E\" diff_index(\"AAAA\", \"ABBA\") #> [[1]] #> [1] 2 3  # ignore case diff_index(\"AAAA\", \"abba\", ignore_case = TRUE) #> [[1]] #> [1] 2 3  # only the index of nth different character, NA if unaccessible diff_index(\"AAAA\", \"ABBA\", nth = 2) #> [[1]] #> [1] 3  diff_index(\"AAAA\", \"ABBA\", 10) #> [[1]] #> [1] NA  # second and third indices diff_index(\"AAAA\", \"ABBB\", nth = 2:3) #> [[1]] #> [1] 3 4  # support vectorized operations diff_index(c(\"ABBA\", \"AABB\"), \"AAAA\") #> [[1]] #> [1] 2 3 #>  #> [[2]] #> [1] 3 4 # just like diff_index same_index(c(\"ABBA\", \"AABB\"), \"AAAA\") #> [[1]] #> [1] 1 4 #>  #> [[2]] #> [1] 1 2 fetch_char(rep(\"ABC\", 3), list(1, 2, 3)) #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"B\" #>  #> [[3]] #> [1] \"C\"  # accept the output of `diff_index` or `same_index` str1 <- c(\"ABCD\", \"AAEF\") str2 <- c(\"AAAA\", \"AAAA\") fetch_char(str1, diff_index(str1, str2)) #> [[1]] #> [1] \"B\" \"C\" \"D\" #>  #> [[2]] #> [1] \"E\" \"F\"  # if the output of `diff_index` have NA, also return NA fetch_char(str1, diff_index(str1, str2, nth = 1:3), na.rm = FALSE) #> [[1]] #> [1] \"B\" \"C\" \"D\" #>  #> [[2]] #> [1] \"E\" \"F\" NA  # remove NA fetch_char(str1, diff_index(str1, str2, nth = 1:5), na.rm = TRUE) #> [[1]] #> [1] \"B\" \"C\" \"D\" #>  #> [[2]] #> [1] \"E\" \"F\"  # collapse the characters from a same string fetch_char(str1, diff_index(str1, str2, nth = 1:5), na.rm = TRUE, collapse = \",\") #> [[1]] #> [1] \"B,C,D\" #>  #> [[2]] #> [1] \"E,F\" fix_to_regex(\"ABC|?(*)\") #> [1] \"ABC\\\\|\\\\?\\\\(\\\\*\\\\)\" detect_dup(c(\"a\", \"B\", \"C_\", \"c -\", \"#A\")) #> [1] \"a\"   \"#A\"  \"C_\"  \"c -\" extract_kv(c(\"x: 1\", \"y: 2\")) #>   x   y  #> \"1\" \"2\" fps_vector(1:10, 2) #> [1]  1 10  fps_vector(1:10, 4) #> [1]  1  4  7 10  fps_vector(c(1, 2, NULL), 2) #> [1] 1 2  fps_vector(c(1, 2, NA), 2) #> [1]  1 NA v <- stringr::str_c(\"id\", 1:3, c(\"A\", \"B\", \"C\")) v #> [1] \"id1A\" \"id2B\" \"id3C\"  # return first group as default reg_match(v, \"id(\\\\d+)(\\\\w)\") #> [1] \"1\" \"2\" \"3\"  reg_match(v, \"id(\\\\d+)(\\\\w)\", group = 2) #> [1] \"A\" \"B\" \"C\"  # when group=-1, return full matched tibble reg_match(v, \"id(\\\\d+)(\\\\w)\", group = -1) #> # A tibble: 3 × 3 #>   match group1 group2 #>   <chr> <chr>  <chr>  #> 1 id1A  1      A      #> 2 id2B  2      B      #> 3 id3C  3      C reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"[A-Za-z]+\") #> [1] \"AB\" \"C\"  reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"\\\\w+\") #> [1] \"A_12B\"  \"C_3232\"  reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"\\\\d+\", sep = \",\") #> [1] \"12\"     \"3,23,2\"  reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"\\\\d\", sep = \",\") #> [1] \"1,2\"     \"3,2,3,2\" split_vector(1:10, c(3, 7)) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 7 #>  #> [[3]] #> [1]  8  9 10   vec <- stringr::str_split(\"ABCDEFGHIJ\", \"\") %>% unlist() vec #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"  split_vector(vec, breaks = c(3, 7), bounds = \"[)\") #> [[1]] #> [1] \"A\" \"B\" #>  #> [[2]] #> [1] \"C\" \"D\" \"E\" \"F\" #>  #> [[3]] #> [1] \"G\" \"H\" \"I\" \"J\" v <- c(   stringr::str_c(\"A\", c(1, 2, 9, 10, 11, 12, 99, 101, 102)),   stringr::str_c(\"B\", c(1, 2, 9, 10, 21, 32, 99, 101, 102)) ) %>% sample() v #>  [1] \"A10\"  \"B32\"  \"A102\" \"B9\"   \"A12\"  \"B102\" \"B21\"  \"B10\"  \"A101\" \"A99\"  #> [11] \"A2\"   \"B2\"   \"A11\"  \"B101\" \"B1\"   \"B99\"  \"A1\"   \"A9\"  group_vector(v) #> $A #> [1] \"A10\"  \"A102\" \"A12\"  \"A101\" \"A99\"  \"A2\"   \"A11\"  \"A1\"   \"A9\"   #>  #> $B #> [1] \"B32\"  \"B9\"   \"B102\" \"B21\"  \"B10\"  \"B2\"   \"B101\" \"B1\"   \"B99\"  group_vector(v, pattern = \"\\\\w\\\\d\") #> $A1 #> [1] \"A10\"  \"A102\" \"A12\"  \"A101\" \"A11\"  \"A1\"   #>  #> $A2 #> [1] \"A2\" #>  #> $A9 #> [1] \"A99\" \"A9\"  #>  #> $B1 #> [1] \"B102\" \"B10\"  \"B101\" \"B1\"   #>  #> $B2 #> [1] \"B21\" \"B2\"  #>  #> $B3 #> [1] \"B32\" #>  #> $B9 #> [1] \"B9\"  \"B99\"  # the pattern rules are just same as reg_match() group_vector(v, pattern = \"\\\\w(\\\\d)\") #> $`1` #>  [1] \"A10\"  \"A102\" \"A12\"  \"B102\" \"B10\"  \"A101\" \"A11\"  \"B101\" \"B1\"   \"A1\"   #>  #> $`2` #> [1] \"B21\" \"A2\"  \"B2\"  #>  #> $`3` #> [1] \"B32\" #>  #> $`9` #> [1] \"B9\"  \"A99\" \"B99\" \"A9\"  # unmatched part will alse be stored group_vector(v, pattern = \"\\\\d{2}\") #> $`10` #> [1] \"A10\"  \"A102\" \"B102\" \"B10\"  \"A101\" \"B101\" #>  #> $`11` #> [1] \"A11\" #>  #> $`12` #> [1] \"A12\" #>  #> $`21` #> [1] \"B21\" #>  #> $`32` #> [1] \"B32\" #>  #> $`99` #> [1] \"A99\" \"B99\" #>  #> $unmatch #> [1] \"B9\" \"A2\" \"B2\" \"B1\" \"A1\" \"A9\" sortf(c(-2, 1, 3), abs) #> [1]  1 -2  3  v <- stringr::str_c(\"id\", c(1, 2, 9, 10, 11, 12, 99, 101, 102)) %>% sample() v #> [1] \"id10\"  \"id9\"   \"id102\" \"id2\"   \"id101\" \"id11\"  \"id12\"  \"id1\"   \"id99\"  sortf(v, function(x) reg_match(x, \"\\\\d+\") %>% as.double()) #> [1] \"id1\"   \"id2\"   \"id9\"   \"id10\"  \"id11\"  \"id12\"  \"id99\"  \"id101\" \"id102\"  # you can also use purrr functions sortf(v, ~ reg_match(.x, \"\\\\d+\") %>% as.double()) #> [1] \"id1\"   \"id2\"   \"id9\"   \"id10\"  \"id11\"  \"id12\"  \"id99\"  \"id101\" \"id102\"   # group before sort v <- c(   stringr::str_c(\"A\", c(1, 2, 9, 10, 11, 12, 99, 101, 102)),   stringr::str_c(\"B\", c(1, 2, 9, 10, 21, 32, 99, 101, 102)) ) %>% sample() v #>  [1] \"B21\"  \"B32\"  \"A1\"   \"B10\"  \"A9\"   \"A101\" \"B1\"   \"A99\"  \"A2\"   \"B101\" #> [11] \"B9\"   \"B99\"  \"A102\" \"B102\" \"A12\"  \"A10\"  \"B2\"   \"A11\"  sortf(v, ~ reg_match(.x, \"\\\\d+\") %>% as.double(), group_pattern = \"\\\\w\") #>  [1] \"A1\"   \"A2\"   \"A9\"   \"A10\"  \"A11\"  \"A12\"  \"A99\"  \"A101\" \"A102\" \"B1\"   #> [11] \"B2\"   \"B9\"   \"B10\"  \"B21\"  \"B32\"  \"B99\"  \"B101\" \"B102\" # first vector have 2 TRUE value v1 <- c(TRUE, FALSE, TRUE)  # the length of second vector should also be 2 v2 <- c(FALSE, TRUE)  pileup_logical(v1, v2) #> [1] FALSE FALSE  TRUE v <- c(a = 1, b = 2, c = 3, b = 2, a = 1)  # unique will lost the names unique(v) #> [1] 1 2 3  # uniq can keep them uniq(v) #> a b c  #> 1 2 3 x <- list(A = 1, B = 3) y <- list(A = 9, C = 10)  replace_item(x, y) #> $A #> [1] 9 #>  #> $B #> [1] 3  replace_item(x, y, keep_extra = TRUE) #> $A #> [1] 9 #>  #> $B #> [1] 3 #>  #> $C #> [1] 10   x <- c(A = 1, B = 3) y <- c(A = 9, C = 10)  replace_item(x, y) #> A B  #> 9 3 gen_char(from = \"g\", n = 5) #> [1] \"g\" \"h\" \"i\" \"j\" \"k\"  gen_char(to = \"g\", n = 5) #> [1] \"c\" \"d\" \"e\" \"f\" \"g\"  gen_char(from = \"g\", to = \"j\") #> [1] \"g\" \"h\" \"i\" \"j\"  gen_char(from = \"t\", n = 5, random = TRUE) #> [1] \"z\" \"u\" \"u\" \"v\" \"y\"  gen_char(from = \"x\", n = 5, random = TRUE, allow_dup = FALSE, add = c(\"+\", \"-\")) #> [1] \"y\" \"x\" \"z\" \"+\" \"-\" rng2seq(c(\"1-5\", \"2\")) #> [[1]] #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" #>  #> [[2]] #> [1] \"2\" top_item(c(\"a\", \"b\", \"c\", \"b\")) #> [1] \"b\"  top_item(c(1, 2, 3, 2, 2)) #> [1] 2 melt_vector(c(NA, 2, 3), method = \"first\") #> [1] 2  melt_vector(c(NA, 2, 3), method = \"sum\") #> [1] 5  melt_vector(c(NA, 2, 3), method = \",\") #> [1] \"2,3\"  melt_vector(c(NA, 2, Inf), invalid = c(NA, Inf)) #> [1] 2 x1 <- c(1, 2, NA, NA) x2 <- c(3, NA, 2, NA) x3 <- c(4, NA, NA, 3)  combn_vector(x1, x2, x3, method = \"sum\") #> [1] 8 2 2 3"},{"path":"https://william-swl.github.io/baizer/index.html","id":"numbers","dir":"","previous_headings":"","what":"numbers","title":"Useful Functions for Data Processing","text":"float number fixed digits character signif round string depend character length signif use floor/ceiling whether number string zero float percent trans wrapper functions process number string prefix suffix expand number vector according adjacent two numbers correct numbers target ratio ticks near number nearest ticks around number generate ticks number vector split positive integer number number vector generate outliers series number max-min normalization","code":"round(2.1951, 2) #> [1] 2.2  round_string(2.1951, 2) #> [1] \"2.20\"  signif(2.1951, 3) #> [1] 2.2  signif_string(2.1951, 3) #> [1] \"2.20\" signif_round_string(20.526, 2, \"short\") #> [1] \"21\" signif_round_string(20.526, 2, \"long\") #> [1] \"20.53\"  # if you want keep the very small value signif_round_string(0.000002654, 3, full_small = TRUE) #> [1] \"0.00000265\" signif_floor(3.19, 2) #> [1] 3.1  signif_ceiling(3.11, 2) #> [1] 3.2 is.zero(\"0.000\") #> [1] TRUE  is.zero(\"0.0001\") #> [1] FALSE float_to_percent(0.123, digits = 1) #> [1] \"12.3%\"  percent_to_float(\"123%\", digits = 3) #> [1] \"1.230\"  percent_to_float(\"123%\", digits = 3, to_double = TRUE) #> [1] 1.23 number_fun_wrapper(\">=2.134%\", function(x) round(x, 2)) #> [1] \">=2.13%\" adjacent_div(10^c(1:3), n_div = 10) #>  [1]   10   20   30   40   50   60   70   80   90  100  100  200  300  400  500 #> [16]  600  700  800  900 1000  # only keep the unique numbers adjacent_div(10^c(1:3), n_div = 10, .unique = TRUE) #>  [1]   10   20   30   40   50   60   70   80   90  100  200  300  400  500  600 #> [16]  700  800  900 1000 correct_ratio(c(10, 10), c(3, 5)) #> [1]  6 10  # support ratio as a float correct_ratio(c(100, 100), c(0.2, 0.8)) #> [1]  25 100  # more numbers correct_ratio(10:13, c(2, 3, 4, 6)) #> [1]  4  6  9 13  # with digits after decimal point correct_ratio(c(10, 10), c(1, 4), digits = 1) #> [1]  2.5 10.0 near_ticks(3462, level = 10) #> [1] 3460 3465 3470 nearest_tick(3462, level = 10) #> [1] 3460 generate_ticks(c(176, 198, 264)) #>  [1] 175 185 195 205 215 225 235 245 255 265 pos_int_split(12, 3, method = \"average\") #> [1] 4 4 4  pos_int_split(12, 3, method = \"random\") #> [1] 5 2 5  # you can also assign the ratio of output pos_int_split(12, 3, method = c(1, 2, 3)) #> [1] 2 4 6 x <- seq(0, 100, 1)  gen_outlier(x, 10) #>  [1]  -73  -77 -132 -190 -106  231  235  213  208  290  # generation limits gen_outlier(x, 10, lim = c(-80, 160)) #>  [1] -72 -71 -51 -78 -60 156 157 158 150 157  # assign the low and high outliers gen_outlier(x, 10, lim = c(-80, 160), assign_n = c(0.1, 0.9)) #>  [1] -76 160 158 152 157 155 154 152 154 157  # just generate low outliers gen_outlier(x, 10, side = \"low\") #>  [1] -106 -188 -126  -85 -102 -158  -90 -141 -134 -167  # return with raw vector gen_outlier(x, 10, only_out = FALSE) #>   [1]  -76  -95  -72 -129 -183  181  235  205  220  297    0    1    2    3    4 #>  [16]    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 #>  [31]   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34 #>  [46]   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49 #>  [61]   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 #>  [76]   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79 #>  [91]   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94 #> [106]   95   96   97   98   99  100 mm_norm(c(1, 3, 4)) #> [1] 0.0000000 0.6666667 1.0000000"},{"path":"https://william-swl.github.io/baizer/index.html","id":"dataframe","dir":"","previous_headings":"","what":"dataframe","title":"Useful Functions for Data Processing","text":"minimal dataset shortcut dplyr::column_to_rownames dplyr::rownames_to_column fancy count show extended column count two columns cross-tabulation table split column return longer tibble move selected rows target location slice tibble ordered vector remove columns ratio NA, default remove columns NA remove rows ratio NA separate numeric vector bins trans table markdown format tibble trans tibble markdown format table relevel target column another reference column tran list tibble generate matrix show whether item element list dataframe rows seriation, reorder rows better pattern. Sometimes clearer hclust  diagnosis tibble character NA, NULL, T/F column, blank cell generate tibbles differences two tibbles transpose dataframe count unique values column","code":"head(mini_diamond) #> # A tibble: 6 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #> 5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #> 6 id-6   2.02 Fair  SI2     14080  8.33  8.37 head(mini_diamond) %>% c2r(\"id\") #>      carat   cut clarity price    x    y #> id-1  1.02  Fair     SI1  3027 6.25 6.18 #> id-2  1.51  Good     VS2 11746 7.27 7.18 #> id-3  0.52 Ideal    VVS1  2029 5.15 5.18 #> id-4  1.54 Ideal     SI2  9452 7.43 7.45 #> id-5  0.72 Ideal     VS1  2498 5.73 5.77 #> id-6  2.02  Fair     SI2 14080 8.33 8.37  # use column index head(mini_diamond) %>% c2r(1) #>      carat   cut clarity price    x    y #> id-1  1.02  Fair     SI1  3027 6.25 6.18 #> id-2  1.51  Good     VS2 11746 7.27 7.18 #> id-3  0.52 Ideal    VVS1  2029 5.15 5.18 #> id-4  1.54 Ideal     SI2  9452 7.43 7.45 #> id-5  0.72 Ideal     VS1  2498 5.73 5.77 #> id-6  2.02  Fair     SI2 14080 8.33 8.37  head(mini_diamond) %>%   c2r(\"id\") %>%   r2c(\"id\") #> # A tibble: 6 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #> 5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #> 6 id-6   2.02 Fair  SI2     14080  8.33  8.37 # count one column fancy_count(mini_diamond, cut) #> # A tibble: 3 × 3 #>   cut       n     r #>   <chr> <int> <dbl> #> 1 Fair     35  0.35 #> 2 Good     31  0.31 #> 3 Ideal    34  0.34  # count an extended column fancy_count(mini_diamond, cut, ext = clarity) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  # change format fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"ratio\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                      #>   <chr> <int> <dbl> <chr>                                                        #> 1 Fair     35  0.35 I1(0.14),IF(0.11),SI1(0.14),SI2(0.11),VS1(0.09),VS2(0.14),V… #> 2 Good     31  0.31 I1(0.16),IF(0.16),SI1(0.13),SI2(0.13),VS1(0.06),VS2(0.13),V… #> 3 Ideal    34  0.34 I1(0.12),IF(0.12),SI1(0.15),SI2(0.12),VS1(0.15),VS2(0.06),V…  fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"clean\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                         #>   <chr> <int> <dbl> <chr>                           #> 1 Fair     35  0.35 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 2 Good     31  0.31 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 3 Ideal    34  0.34 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2  # count an extended column, in an order by n fancy_count(mini_diamond, cut, ext = clarity, sort = TRUE) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),SI1(5),VS2(5),VVS1(5),IF(4),SI2(4),VVS2(4),VS1(3) #> 2 Ideal    34  0.34 SI1(5),VS1(5),VVS1(5),VVS2(5),I1(4),IF(4),SI2(4),VS2(2) #> 3 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS2(4),VVS1(4),VVS2(3),VS1(2)  # extended column after a two-column count fancy_count(mini_diamond, cut, clarity, ext = id) %>% head(5) #> # A tibble: 5 × 5 #>   cut   clarity     n     r id                                           #>   <chr> <chr>   <int> <dbl> <chr>                                        #> 1 Fair  I1          5  0.05 id-20(1),id-23(1),id-28(1),id-32(1),id-48(1) #> 2 Fair  IF          4  0.04 id-12(1),id-45(1),id-89(1),id-95(1)          #> 3 Fair  SI1         5  0.05 id-1(1),id-64(1),id-65(1),id-68(1),id-76(1)  #> 4 Fair  SI2         4  0.04 id-25(1),id-40(1),id-6(1),id-99(1)           #> 5 Fair  VS1         3  0.03 id-36(1),id-43(1),id-85(1) cross_count(mini_diamond, cut, clarity) #>       I1 IF SI1 SI2 VS1 VS2 VVS1 VVS2 #> Fair   5  4   5   4   3   5    5    4 #> Good   5  5   4   4   2   4    4    3 #> Ideal  4  4   5   4   5   2    5    5  # show the ratio in the row cross_count(mini_diamond, cut, clarity, method = \"rowr\") #>         I1   IF  SI1  SI2  VS1  VS2 VVS1 VVS2 #> Fair  0.14 0.11 0.14 0.11 0.09 0.14 0.14 0.11 #> Good  0.16 0.16 0.13 0.13 0.06 0.13 0.13 0.10 #> Ideal 0.12 0.12 0.15 0.12 0.15 0.06 0.15 0.15  # show the ratio in the col cross_count(mini_diamond, cut, clarity, method = \"colr\") #>         I1   IF  SI1  SI2 VS1  VS2 VVS1 VVS2 #> Fair  0.36 0.31 0.36 0.33 0.3 0.45 0.36 0.33 #> Good  0.36 0.38 0.29 0.33 0.2 0.36 0.29 0.25 #> Ideal 0.29 0.31 0.36 0.33 0.5 0.18 0.36 0.42 df <- fancy_count(mini_diamond, cut, ext = clarity) head(df) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  split_column(df, name_col = cut, value_col = clarity) #> # A tibble: 24 × 2 #>    cut   clarity #>    <chr> <chr>   #>  1 Fair  I1(5)   #>  2 Fair  IF(4)   #>  3 Fair  SI1(5)  #>  4 Fair  SI2(4)  #>  5 Fair  VS1(3)  #>  6 Fair  VS2(5)  #>  7 Fair  VVS1(5) #>  8 Fair  VVS2(4) #>  9 Good  I1(5)   #> 10 Good  IF(5)   #> # … with 14 more rows # move row 3-5 after row 8 move_row(mini_diamond, 3:5, .after = 8) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  4 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  7 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  8 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # … with 90 more rows  # move row 3-5 before the first row move_row(mini_diamond, 3:5, .before = TRUE) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  5 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # … with 90 more rows  # move row 3-5 after the last row move_row(mini_diamond, 3:5, .after = TRUE) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  4 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-9   1.01 Ideal SI1      5590  6.43  6.4  #>  7 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #>  8 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  9 id-12  0.71 Fair  IF       3205  5.87  5.81 #> 10 id-13  0.56 Ideal SI1      1633  5.31  5.32 #> # … with 90 more rows ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\")) #> # A tibble: 2 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18  # support NA and known values in ordered vector ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", \"id-3\", NA)) #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> NA values! #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> duplicated values! #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 <NA>  NA    <NA>  <NA>       NA NA    NA    #> 4 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 5 <NA>  NA    <NA>  <NA>       NA NA    NA  # remove NA ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", \"id-3\", NA),   na.rm = TRUE ) #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> NA values! #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> duplicated values! #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 id-3   0.52 Ideal VVS1     2029  5.15  5.18  # remove duplication ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", \"id-3\", NA),   dup.rm = TRUE ) #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> NA values! #> Warning in ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\", \"unknown_id\", : 2 #> duplicated values! #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 3 <NA>  NA    <NA>  <NA>       NA NA    NA df_with_nacol <- dplyr::bind_cols(   mini_diamond,   tibble::tibble(na1 = NA, na2 = NA) ) df_with_nacol #> # A tibble: 100 × 9 #>    id    carat cut   clarity price     x     y na1   na2   #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> <lgl> <lgl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 NA    NA    #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 NA    NA    #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 NA    NA    #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 NA    NA    #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 NA    NA    #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 NA    NA    #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 NA    NA    #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 NA    NA    #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  NA    NA    #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 NA    NA    #> # … with 90 more rows  remove_nacol(df_with_nacol) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # … with 90 more rows  # remove the columns that have more than 20% NA values # remove_nacol(df_with_nacol, max_ratio=0.2) # remove_narow(df) vector <- dplyr::pull(mini_diamond, price, id)  hist_bins(vector) #> # A tibble: 100 × 5 #>    id    value  start    end   bin #>    <chr> <int>  <dbl>  <dbl> <int> #>  1 id-1   3027  2218.  3975.     2 #>  2 id-2  11746 11000. 12757.     7 #>  3 id-3   2029   462   2218.     1 #>  4 id-4   9452  9244  11000.     6 #>  5 id-5   2498  2218.  3975.     2 #>  6 id-6  14080 12757. 14513.     8 #>  7 id-7    752   462   2218.     1 #>  8 id-8   1029   462   2218.     1 #>  9 id-9   5590  3975.  5731.     3 #> 10 id-10  1691   462   2218.     1 #> # … with 90 more rows  # set the max and min limits hist_bins(vector, bins = 20, lim = c(0, 20000)) #> # A tibble: 100 × 5 #>    id    value start   end   bin #>    <chr> <int> <dbl> <dbl> <int> #>  1 id-1   3027  3000  4000     4 #>  2 id-2  11746 11000 12000    12 #>  3 id-3   2029  2000  3000     3 #>  4 id-4   9452  9000 10000    10 #>  5 id-5   2498  2000  3000     3 #>  6 id-6  14080 14000 15000    15 #>  7 id-7    752     0  1000     1 #>  8 id-8   1029  1000  2000     2 #>  9 id-9   5590  5000  6000     6 #> 10 id-10  1691  1000  2000     2 #> # … with 90 more rows  # or pass breaks directly hist_bins(vector, breaks = seq(0, 20000, length.out = 11)) #> # A tibble: 100 × 5 #>    id    value start   end   bin #>    <chr> <int> <dbl> <dbl> <int> #>  1 id-1   3027  2000  4000     2 #>  2 id-2  11746 10000 12000     6 #>  3 id-3   2029  2000  4000     2 #>  4 id-4   9452  8000 10000     5 #>  5 id-5   2498  2000  4000     2 #>  6 id-6  14080 14000 16000     8 #>  7 id-7    752     0  2000     1 #>  8 id-8   1029     0  2000     1 #>  9 id-9   5590  4000  6000     3 #> 10 id-10  1691     0  2000     1 #> # … with 90 more rows x <- \"   | col1 | col2 | col3 |   | ---- | ---- | ---- |   | v1   | v2   | v3   |   | r1   | r2   | r3   |   \"  as_tibble_md(x) #> # A tibble: 2 × 3 #>   col1  col2  col3  #>   <chr> <chr> <chr> #> 1 v1    v2    v3    #> 2 r1    r2    r3 mini_diamond %>%   head(5) %>%   as_md_table() #> | id | carat | cut | clarity | price | x | y | #> | - | - | - | - | - | - | - | #> | id-1 | 1.02 | Fair | SI1 |  3027 | 6.25 | 6.18 | #> | id-2 | 1.51 | Good | VS2 | 11746 | 7.27 | 7.18 | #> | id-3 | 0.52 | Ideal | VVS1 |  2029 | 5.15 | 5.18 | #> | id-4 | 1.54 | Ideal | SI2 |  9452 | 7.43 | 7.45 | #> | id-5 | 0.72 | Ideal | VS1 |  2498 | 5.73 | 5.77 | cut_level <- mini_diamond %>%   pull(cut) %>%   unique() df <- mini_diamond %>%   dplyr::mutate(cut = factor(cut, cut_level)) %>%   dplyr::mutate(cut0 = stringr::str_c(cut, \"xxx\"))  levels(df$cut) #> [1] \"Fair\"  \"Good\"  \"Ideal\"  levels(df$cut0) #> NULL  # after relevel df <- ref_level(df, cut0, cut)  levels(df$cut) #> [1] \"Fair\"  \"Good\"  \"Ideal\"  levels(df$cut0) #> [1] \"Fairxxx\"  \"Goodxxx\"  \"Idealxxx\" x <- list(   c(\"a\", \"1\"),   c(\"b\", \"2\"),   c(\"c\", \"3\") )  list2tibble(x, colnames = c(\"char\", \"num\")) #> # A tibble: 3 × 2 #>   char  num   #>   <chr> <chr> #> 1 a     1     #> 2 b     2     #> 3 c     3   x <- list(   c(\"a\", \"b\", \"c\"),   c(\"1\", \"2\", \"3\") )  list2tibble(x, method = \"col\") #> # A tibble: 3 × 2 #>   V1    V2    #>   <chr> <chr> #> 1 a     1     #> 2 b     2     #> 3 c     3 x <- 1:5 %>% map(~ gen_char(to = \"k\", n = 5, random = TRUE, seed = .x))  x #> [[1]] #> [1] \"i\" \"d\" \"g\" \"a\" \"b\" #>  #> [[2]] #> [1] \"e\" \"f\" \"f\" \"h\" \"a\" #>  #> [[3]] #> [1] \"e\" \"j\" \"g\" \"d\" \"j\" #>  #> [[4]] #> [1] \"h\" \"k\" \"c\" \"c\" \"g\" #>  #> [[5]] #> [1] \"b\" \"k\" \"i\" \"k\" \"i\"  exist_matrix(x) #> # A tibble: 5 × 11 #>   g     i     k     a     b     c     d     e     f     h     j     #> * <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> #> 1 TRUE  TRUE  FALSE TRUE  TRUE  FALSE TRUE  FALSE FALSE FALSE FALSE #> 2 FALSE FALSE FALSE TRUE  FALSE FALSE FALSE TRUE  TRUE  TRUE  FALSE #> 3 TRUE  FALSE FALSE FALSE FALSE FALSE TRUE  TRUE  FALSE FALSE TRUE  #> 4 TRUE  FALSE TRUE  FALSE FALSE TRUE  FALSE FALSE FALSE TRUE  FALSE #> 5 FALSE TRUE  TRUE  FALSE TRUE  FALSE FALSE FALSE FALSE FALSE FALSE seriated_df <- seriate_df(df) x <- tibble(   c1 = c(\"NA\", NA, \"a\", \"b\"),   c2 = c(\"c\", \"d\", \"e\", \"NULL\"),   c3 = c(\"T\", \"F\", \"F\", \"T\"),   c4 = c(\"T\", \"F\", \"F\", NA),   c5 = c(\"\", \" \", \"\\t\", \"\\n\") ) x #> # A tibble: 4 × 5 #>   c1    c2    c3    c4    c5    #>   <chr> <chr> <chr> <chr> <chr> #> 1 NA    c     T     T     \"\"    #> 2 <NA>  d     F     F     \" \"   #> 3 a     e     F     F     \"\\t\"  #> 4 b     NULL  T     <NA>  \"\\n\"  dx_tb(x) #> $chr_na #> # A tibble: 1 × 2 #>     row   col #>   <int> <int> #> 1     1     1 #>  #> $chr_null #> # A tibble: 1 × 2 #>     row   col #>   <int> <int> #> 1     4     2 #>  #> $only_tf #> [1] 3 4 #>  #> $blank_in_cell #> [1] \" \"  \"\\t\" \"\\n\" #>  #> $stat #>        chr_na      chr_null       only_tf blank_in_cell  #>             1             1             2             3  #>  #> $pass #> [1] FALSE gen_tb() #> # A tibble: 3 × 4 #>       V1    V2    V3      V4 #>    <dbl> <dbl> <dbl>   <dbl> #> 1  0.895 0.226 2.36  -0.0520 #> 2 -0.320 1.37  1.86  -0.334  #> 3 -0.836 0.292 0.282 -0.0801  gen_tb(fill = \"str\", nrow = 3, ncol = 4, len = 3) #> # A tibble: 3 × 4 #>   V1    V2    V3    V4    #>   <chr> <chr> <chr> <chr> #> 1 jeh   xmz   aml   ruf   #> 2 fzk   pso   hjr   jdl   #> 3 rpd   tfa   qlz   hyq tb1 <- gen_tb(fill = \"int\", seed = 1) tb1 #> # A tibble: 3 × 4 #>      V1    V2    V3    V4 #>   <dbl> <dbl> <dbl> <dbl> #> 1    -7    15     4    -4 #> 2     1     3     7    15 #> 3    -9    -9     5     3  tb2 <- gen_tb(fill = \"int\", seed = 3) tb2 #> # A tibble: 3 × 4 #>      V1    V2    V3    V4 #>   <dbl> <dbl> <dbl> <dbl> #> 1   -10   -12     0    12 #> 2    -3     1    11    -8 #> 3     2     0   -13   -12  diff_tb(tb1, tb2) #> # A tibble: 6 × 5 #>   compare V1    V2    V3    V4    #>   <chr>   <chr> <chr> <chr> <chr> #> 1 -[1,]   -7    15    4     -4    #> 2 +[1,]   -10   -12   0     12    #> 3 -[2,]   1     3     7     15    #> 4 +[2,]   -3    1     11    -8    #> 5 -[3,]   -9    -9    5     3     #> 6 +[3,]   2     0     -13   -12 tdf(c2r(head(mini_diamond), \"id\")) #> # A tibble: 6 × 7 #>   item    `id-1`  `id-2` `id-3`  `id-4`  `id-5`  `id-6` #>   <chr>   <chr>   <chr>  <chr>   <chr>   <chr>   <chr>  #> 1 carat   \"1.02\"  1.51   \"0.52\"  \"1.54\"  \"0.72\"  2.02   #> 2 cut     \"Fair\"  Good   \"Ideal\" \"Ideal\" \"Ideal\" Fair   #> 3 clarity \"SI1\"   VS2    \"VVS1\"  \"SI2\"   \"VS1\"   SI2    #> 4 price   \" 3027\" 11746  \" 2029\" \" 9452\" \" 2498\" 14080  #> 5 x       \"6.25\"  7.27   \"5.15\"  \"7.43\"  \"5.73\"  8.33   #> 6 y       \"6.18\"  7.18   \"5.18\"  \"7.45\"  \"5.77\"  8.37 uniq_in_cols(mini_diamond) #> # A tibble: 7 × 2 #>   col     uniqe_values #>   <chr>   <chr>        #> 1 id      100          #> 2 carat   57           #> 3 cut     3            #> 4 clarity 8            #> 5 price   99           #> 6 x       89           #> 7 y       87"},{"path":"https://william-swl.github.io/baizer/index.html","id":"stat","dir":"","previous_headings":"","what":"stat","title":"Useful Functions for Data Processing","text":"generate combinations statistical test returns extensible tibble fold change calculation returns extensible tibble calculate phi coefficient two binary variables","code":"gen_combn(1:4, n = 2) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 3 #>  #> [[3]] #> [1] 1 4 #>  #> [[4]] #> [1] 2 3 #>  #> [[5]] #> [1] 2 4 #>  #> [[6]] #> [1] 3 4 stat_test(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 24 × 9 #>    y     clarity group1 group2    n1    n2      p  plim symbol #>    <chr> <chr>   <chr>  <chr>  <int> <int>  <dbl> <dbl> <chr>  #>  1 price I1      Fair   Good       5     5 0.310   1.01 NS     #>  2 price I1      Fair   Ideal      5     4 0.905   1.01 NS     #>  3 price I1      Good   Ideal      5     4 0.190   1.01 NS     #>  4 price IF      Fair   Good       4     5 0.0635  1.01 NS     #>  5 price IF      Fair   Ideal      4     4 0.0591  1.01 NS     #>  6 price IF      Good   Ideal      5     4 1       1.01 NS     #>  7 price SI1     Fair   Good       5     4 1       1.01 NS     #>  8 price SI1     Fair   Ideal      5     5 1       1.01 NS     #>  9 price SI1     Good   Ideal      4     5 0.413   1.01 NS     #> 10 price SI2     Fair   Good       4     4 0.0571  1.01 NS     #> # … with 14 more rows stat_fc(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 24 × 8 #>    y     clarity group1 group2     y1    y2    fc fc_fmt #>    <chr> <chr>   <chr>  <chr>   <dbl> <dbl> <dbl> <chr>  #>  1 price I1      Fair   Good    4695. 2760. 1.70  1.7x   #>  2 price I1      Fair   Ideal   4695. 4249  1.11  1.1x   #>  3 price I1      Good   Ideal   2760. 4249  0.649 0.65x  #>  4 price IF      Fair   Good    2016  1044. 1.93  1.9x   #>  5 price IF      Fair   Ideal   2016   962. 2.10  2.1x   #>  6 price IF      Good   Ideal   1044.  962. 1.09  1.1x   #>  7 price SI1     Fair   Good    5844. 3227. 1.81  1.8x   #>  8 price SI1     Fair   Ideal   5844. 3877. 1.51  1.5x   #>  9 price SI1     Good   Ideal   3227. 3877. 0.832 0.83x  #> 10 price SI2     Fair   Good   13162. 6539. 2.01  2.0x   #> # … with 14 more rows data <- matrix(c(10, 8, 14, 18), nrow = 2) stat_phi(data) #> [1] 0.1134241"},{"path":"https://william-swl.github.io/baizer/index.html","id":"io","dir":"","previous_headings":"","what":"IO","title":"Useful Functions for Data Processing","text":"get command line arguments detect whether directory empty recursively, detect whether file empty recursively write tibble, list tibbles excel file fetch remote files via sftp list files remote server via sftp","code":"cmdargs() #> $wd #> [1] \"/home/william/rpkg/baizer\" #>  #> $R_env #> [1] \"/home/william/software/mambaforge/envs/baizer/lib/R/bin/exec/R\" #>  #> $script_path #> character(0) #>  #> $script_dir #> character(0) #>  #> $env_configs #> [1] \"--slave\"                                #> [2] \"--no-save\"                              #> [3] \"--no-restore\"                           #> [4] \"-f\"                                     #> [5] \"/tmp/RtmpI0to3Z/callr-scr-51aa2fceae77\"  cmdargs(\"R_env\") #> [1] \"/home/william/software/mambaforge/envs/baizer/lib/R/bin/exec/R\" # create an empty directory dir.create(\"some/deep/path/in/a/folder\", recursive = TRUE) empty_dir(\"some/deep/path/in/a/folder\") #> [1] TRUE  # create an empty file file.create(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE empty_dir(\"some/deep/path/in/a/folder\") #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] TRUE  # create a file with only character of length 0 write(\"\", \"some/deep/path/in/a/folder/there_is_a_file.txt\") empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE  # clean unlink(\"some\", recursive = TRUE) # write_excel(mini_diamond, \"mini_diamond.xlsx\")  # Ldf <- list(mini_diamond[1:3, ], mini_diamond[4:6, ]) # write_excel(Ldf, '2sheets.xlsx') # sftp_con <- sftp_connect(server='remote_host', port=22, #                         user='username', password = \"password\", wd='~') # # sftp_download(sftp_con, #    path=c('t1.txt', 't2.txt'), #    to=c('path1.txt', 'path2.txt') # ) # sftp_ls(sftp_con, 'your/dir')"},{"path":[]},{"path":"https://william-swl.github.io/baizer/index.html","id":"tbflt","dir":"","previous_headings":"S3 classes in baizer","what":"tbflt","title":"Useful Functions for Data Processing","text":"save series filter conditions, support logical operation among conditions use filterC apply tbflt dplyr::filter stricter limitation avoid unexpected default behavior","code":"c1 <- tbflt(cut == \"Fair\") c2 <- tbflt(x > 8) c1 | c2 #> <quosure> #> expr: ^cut == \"Fair\" | x > 8 #> env:  0x560cfbdea1f8  mini_diamond %>%   filterC(c1) %>%   head(5) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 3 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> 4 id-12  0.71 Fair  IF       3205  5.87  5.81 #> 5 id-18  0.34 Fair  VVS1     1012  4.8   4.76  mini_diamond %>%   filterC(!c1) %>%   head(5) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-2   1.51 Good  VS2     11746  7.27  7.18 #> 2 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 3 id-4   1.54 Ideal SI2      9452  7.43  7.45 #> 4 id-5   0.72 Ideal VS1      2498  5.73  5.77 #> 5 id-7   0.27 Good  VVS1      752  4.1   4.07  mini_diamond %>% filterC(c1 & c2) #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-68  2.32 Fair  SI1     18026  8.47  8.31 # default behavior of dplyr::filter, use column in data at first x <- 8 mini_diamond %>% dplyr::filter(y > x) #> # A tibble: 53 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  7 id-13  0.56 Ideal SI1      1633  5.31  5.32 #>  8 id-14  0.3  Ideal VVS2      812  4.33  4.39 #>  9 id-15  0.28 Good  IF        612  4.09  4.12 #> 10 id-16  0.41 Good  I1        467  4.7   4.74 #> # … with 43 more rows  # so the default behavior of filterC is just like that # but if you want y > 8, and the defination of cond is far away from # its application, the results may be unexpected  x <- 8 cond <- tbflt(y > x) mini_diamond %>% filterC(cond) #> # A tibble: 53 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  7 id-13  0.56 Ideal SI1      1633  5.31  5.32 #>  8 id-14  0.3  Ideal VVS2      812  4.33  4.39 #>  9 id-15  0.28 Good  IF        612  4.09  4.12 #> 10 id-16  0.41 Good  I1        467  4.7   4.74 #> # … with 43 more rows  cond <- tbflt(y > 8) mini_diamond %>% filterC(cond) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57   # to avoid this, set usecol=FALSE. An error will be raised for warning you # to change the variable name # mini_diamond %>% filterC(cond, usecol=FALSE)   # you can always ignore this argument if you know how to use .env or !! x <- 8 cond1 <- tbflt(y > !!x) mini_diamond %>% filterC(cond1) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57  cond2 <- tbflt(y > .env$x) mini_diamond %>% filterC(cond1) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57"},{"path":"https://william-swl.github.io/baizer/index.html","id":"dev","dir":"","previous_headings":"","what":"dev","title":"Useful Functions for Data Processing","text":"add #' line codes roxygen examples use aliases function arguments check arguments custom function","code":"roxygen_fmt(   \" code line1 code line2 \" ) #>  #> #' code line1 #> #' code line2 #> #' # set y, z as aliases of x when create a function func <- function(x = 1, y = NULL, z = NULL) {   x <- alias_arg(x, y, z, default = x)   return(x) }  func() #> [1] 1  func(x = 8) #> [1] 8  func(z = 10) #> [1] 10 x <- 1 y <- 3 z <- NULL  func <- function(x = NULL, y = NULL, z = NULL) {   if (check_arg(x, y, z, n = 2)) {     print(\"As expected, two arguments is not NULL\")   }    if (check_arg(x, y, z, n = 1, method = ~ .x < 2)) {     print(\"As expected, one argument less than 2\")   } }"},{"path":"https://william-swl.github.io/baizer/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Useful Functions for Data Processing","text":"Please note baizer project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":null,"dir":"Reference","previous_headings":"","what":"expand a number vector according to the adjacent two numbers — adjacent_div","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"expand number vector according adjacent two numbers","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"","code":"adjacent_div(v, n_div = 10, .unique = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"v number vector n_div many divisions expanded two numbers .unique keep unique numbers","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"new number vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/adjacent_div.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"expand a number vector according to the adjacent two numbers — adjacent_div","text":"","code":"adjacent_div(10^c(1:3), n_div = 10) #>  [1]   10   20   30   40   50   60   70   80   90  100  100  200  300  400  500 #> [16]  600  700  800  900 1000"},{"path":"https://william-swl.github.io/baizer/reference/alias_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"use aliases for function arguments — alias_arg","title":"use aliases for function arguments — alias_arg","text":"use aliases function arguments","code":""},{"path":"https://william-swl.github.io/baizer/reference/alias_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use aliases for function arguments — alias_arg","text":"","code":"alias_arg(..., default = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/alias_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use aliases for function arguments — alias_arg","text":"... aliases argument default alias default value","code":""},{"path":"https://william-swl.github.io/baizer/reference/alias_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use aliases for function arguments — alias_arg","text":"finally value argument across aliases","code":""},{"path":"https://william-swl.github.io/baizer/reference/alias_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"use aliases for function arguments — alias_arg","text":"","code":"# set y, z as aliases of x when create a function func <- function(x = 1, y = NULL, z = NULL) {   x <- alias_arg(x, y, z, default = x)   return(x) }"},{"path":"https://william-swl.github.io/baizer/reference/as_md_table.html","id":null,"dir":"Reference","previous_headings":"","what":"trans a tibble into markdown format table — as_md_table","title":"trans a tibble into markdown format table — as_md_table","text":"trans tibble markdown format table","code":""},{"path":"https://william-swl.github.io/baizer/reference/as_md_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans a tibble into markdown format table — as_md_table","text":"","code":"as_md_table(x, show = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/as_md_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans a tibble into markdown format table — as_md_table","text":"x tibble show show result instead return markdown string, TRUE default","code":""},{"path":"https://william-swl.github.io/baizer/reference/as_md_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans a tibble into markdown format table — as_md_table","text":"NULL markdown string","code":""},{"path":"https://william-swl.github.io/baizer/reference/as_md_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans a tibble into markdown format table — as_md_table","text":"","code":"mini_diamond %>%   head(5) %>%   as_md_table() #> | id | carat | cut | clarity | price | x | y | #> | - | - | - | - | - | - | - | #> | id-1 | 1.02 | Fair | SI1 |  3027 | 6.25 | 6.18 | #> | id-2 | 1.51 | Good | VS2 | 11746 | 7.27 | 7.18 | #> | id-3 | 0.52 | Ideal | VVS1 |  2029 | 5.15 | 5.18 | #> | id-4 | 1.54 | Ideal | SI2 |  9452 | 7.43 | 7.45 | #> | id-5 | 0.72 | Ideal | VS1 |  2498 | 5.73 | 5.77 |"},{"path":"https://william-swl.github.io/baizer/reference/as_tibble_md.html","id":null,"dir":"Reference","previous_headings":"","what":"trans a table in markdown format into tibble — as_tibble_md","title":"trans a table in markdown format into tibble — as_tibble_md","text":"trans table markdown format tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/as_tibble_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans a table in markdown format into tibble — as_tibble_md","text":"","code":"as_tibble_md(x)"},{"path":"https://william-swl.github.io/baizer/reference/as_tibble_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans a table in markdown format into tibble — as_tibble_md","text":"x character string","code":""},{"path":"https://william-swl.github.io/baizer/reference/as_tibble_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans a table in markdown format into tibble — as_tibble_md","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/as_tibble_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans a table in markdown format into tibble — as_tibble_md","text":"","code":"x <- \" col1 | col2 | col3 | | ---- | ---- | ---- | | v1   | v2   | v3   | | r1   | r2   | r3   | \"  as_tibble_md(x) #> # A tibble: 2 × 3 #>   col1  col2  col3  #>   <chr> <chr> <chr> #> 1 v1    v2    v3    #> 2 r1    r2    r3"},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"whether the expression is an atomic one — atomic_expr","title":"whether the expression is an atomic one — atomic_expr","text":"whether expression atomic one","code":""},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"whether the expression is an atomic one — atomic_expr","text":"","code":"atomic_expr(ex)"},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"whether the expression is an atomic one — atomic_expr","text":"ex expression","code":""},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"whether the expression is an atomic one — atomic_expr","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/atomic_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"whether the expression is an atomic one — atomic_expr","text":"","code":"atomic_expr(rlang::expr(x)) #> [1] TRUE  atomic_expr(rlang::expr(!x)) #> [1] TRUE  atomic_expr(rlang::expr(x + y)) #> [1] TRUE  atomic_expr(rlang::expr(x > 1)) #> [1] TRUE  atomic_expr(rlang::expr(!x + y)) #> [1] FALSE  atomic_expr(rlang::expr(x > 1 | y < 2)) #> [1] FALSE"},{"path":"https://william-swl.github.io/baizer/reference/baizer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"baizer: Useful Functions for Data Processing — baizer-package","title":"baizer: Useful Functions for Data Processing — baizer-package","text":"ancient Chinese mythology, Bai Ze divine creature knows needs everything. 'baizer' provides data processing functions frequently used author. Hope package also knows want!","code":""},{"path":[]},{"path":"https://william-swl.github.io/baizer/reference/baizer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"baizer: Useful Functions for Data Processing — baizer-package","text":"Maintainer: William Song william_swl@163.com","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper of tibble::column_to_rownames — c2r","title":"wrapper of tibble::column_to_rownames — c2r","text":"wrapper tibble::column_to_rownames","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper of tibble::column_to_rownames — c2r","text":"","code":"c2r(df, col = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper of tibble::column_to_rownames — c2r","text":"df tibble col col name","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper of tibble::column_to_rownames — c2r","text":"data.frame","code":""},{"path":"https://william-swl.github.io/baizer/reference/c2r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper of tibble::column_to_rownames — c2r","text":"","code":"mini_diamond %>% c2r(\"id\") #>        carat   cut clarity price    x    y #> id-1    1.02  Fair     SI1  3027 6.25 6.18 #> id-2    1.51  Good     VS2 11746 7.27 7.18 #> id-3    0.52 Ideal    VVS1  2029 5.15 5.18 #> id-4    1.54 Ideal     SI2  9452 7.43 7.45 #> id-5    0.72 Ideal     VS1  2498 5.73 5.77 #> id-6    2.02  Fair     SI2 14080 8.33 8.37 #> id-7    0.27  Good    VVS1   752 4.10 4.07 #> id-8    0.51  Good     SI2  1029 5.05 5.08 #> id-9    1.01 Ideal     SI1  5590 6.43 6.40 #> id-10   0.70  Fair    VVS1  1691 5.56 5.41 #> id-11   1.02  Good    VVS1  7861 6.37 6.40 #> id-12   0.71  Fair      IF  3205 5.87 5.81 #> id-13   0.56 Ideal     SI1  1633 5.31 5.32 #> id-14   0.30 Ideal    VVS2   812 4.33 4.39 #> id-15   0.28  Good      IF   612 4.09 4.12 #> id-16   0.41  Good      I1   467 4.70 4.74 #> id-17   0.97 Ideal      I1  2239 6.40 6.43 #> id-18   0.34  Fair    VVS1  1012 4.80 4.76 #> id-19   0.59 Ideal    VVS2  2155 5.34 5.39 #> id-20   1.20  Fair      I1  3011 6.61 6.54 #> id-21   0.40  Good    VVS1  1080 4.71 4.73 #> id-22   0.90  Good     VS2  3246 6.16 6.07 #> id-23   0.70  Fair      I1  1158 5.64 5.50 #> id-24   0.92  Good     VS2  4247 6.11 6.17 #> id-25   2.10  Fair     SI2 15827 7.97 7.92 #> id-26   0.31 Ideal     VS1   717 4.36 4.41 #> id-27   1.13  Good     SI2  4998 6.93 6.88 #> id-28   2.02  Fair      I1  6346 7.87 7.80 #> id-29   0.72 Ideal     SI2  2300 5.72 5.78 #> id-30   0.52  Fair    VVS2  1401 5.26 5.20 #> id-31   1.03 Ideal    VVS1  8398 6.54 6.50 #> id-32   2.00  Fair      I1  5667 7.78 7.74 #> id-33   1.21  Good     SI1  5252 6.63 6.71 #> id-34   1.14  Good      I1  2327 6.63 6.55 #> id-35   1.00 Ideal    VVS1  6535 6.37 6.41 #> id-36   1.00  Fair     VS1  6115 6.26 6.21 #> id-37   0.51 Ideal    VVS1  2812 5.15 5.11 #> id-38   1.09 Ideal     VS2  5421 6.62 6.67 #> id-39   0.30 Ideal      IF   863 4.33 4.36 #> id-40   1.52  Fair     SI2  7388 7.23 7.19 #> id-41   0.98 Ideal     SI2  3873 6.35 6.39 #> id-42   0.32  Good     SI1   589 4.33 4.35 #> id-43   1.12  Fair     VS1  5487 6.48 6.52 #> id-44   0.70  Good     VS2  3087 5.49 5.56 #> id-45   0.47  Fair      IF  2211 5.09 4.98 #> id-46   0.34  Fair    VVS1  1040 4.72 4.77 #> id-47   1.10 Ideal     SI1  5370 6.66 6.70 #> id-48   2.01  Fair      I1  7294 8.30 8.19 #> id-49   2.16 Ideal      I1  8709 8.31 8.26 #> id-50   1.00  Good     SI1  4851 6.27 6.31 #> id-51   1.00  Good    VVS2  6748 6.32 6.30 #> id-52   0.72  Fair     VS2  2306 5.66 5.71 #> id-53   0.33  Good      IF  1052 4.57 4.55 #> id-54   0.40 Ideal    VVS2   931 4.72 4.75 #> id-55   0.71  Fair    VVS1  3062 5.67 5.57 #> id-56   0.40  Good      IF  1120 4.75 4.80 #> id-57   0.30 Ideal      IF   863 4.32 4.34 #> id-58   0.90  Fair    VVS2  3288 6.10 6.12 #> id-59   0.91  Fair    VVS1  4115 6.38 6.40 #> id-60   0.29 Ideal    VVS2   607 4.27 4.29 #> id-61   0.30  Good      IF   631 4.23 4.30 #> id-62   0.46  Good      IF  1806 5.12 5.18 #> id-63   1.35  Fair     VS2  5625 6.98 6.93 #> id-64   1.01  Fair     SI1  4480 6.34 6.29 #> id-65   0.63  Fair     SI1  1952 5.36 5.41 #> id-66   0.90  Fair     VS2  2815 6.08 6.04 #> id-67   0.58 Ideal     SI2  1442 5.40 5.36 #> id-68   2.32  Fair     SI1 18026 8.47 8.31 #> id-69   0.40  Good      I1   491 4.64 4.68 #> id-70   0.90  Fair     VS2  4277 6.26 6.29 #> id-71   0.97 Ideal      I1  2370 6.34 6.28 #> id-72   0.42  Good    VVS2  1042 4.72 4.78 #> id-73   0.40 Ideal      IF  1229 4.73 4.76 #> id-74   0.45  Good    VVS1  1548 4.85 4.78 #> id-75   0.71  Good     SI1  2215 5.62 5.59 #> id-76   0.64  Fair     SI1  1733 5.65 5.39 #> id-77   0.71  Fair     VS2  2623 5.83 5.81 #> id-78   0.70 Ideal     VS1  3535 5.69 5.72 #> id-79   1.08  Fair    VVS2  5171 6.90 6.80 #> id-80   0.80 Ideal     VS1  4070 5.91 5.96 #> id-81   0.41  Good     VS1   954 4.77 4.79 #> id-82   0.90  Good      I1  2143 6.09 6.05 #> id-83   0.73 Ideal    VVS1  3487 5.77 5.82 #> id-84   0.50 Ideal     SI1  1415 5.11 5.05 #> id-85   1.00  Fair     VS1  7083 6.77 6.71 #> id-86   0.31 Ideal      IF   891 4.38 4.40 #> id-87   0.34  Good     VS1   596 4.40 4.44 #> id-88   0.31 Ideal     VS2   628 4.38 4.34 #> id-89   0.30  Fair      IF  1208 4.47 4.35 #> id-90   1.13 Ideal      I1  3678 6.65 6.69 #> id-91   1.73  Good      I1  8370 7.60 7.56 #> id-92   1.51  Good    VVS2 14654 7.18 7.24 #> id-93   1.09 Ideal     SI1  5376 6.60 6.64 #> id-94   0.28 Ideal     VS1   462 4.19 4.23 #> id-95   0.37  Fair      IF  1440 4.68 4.73 #> id-96   0.32 Ideal    VVS2   854 4.45 4.46 #> id-97   2.61  Good     SI2 13784 8.66 8.57 #> id-98   1.00  Fair    VVS2  4312 6.27 6.23 #> id-99   2.00  Fair     SI2 15351 7.63 7.59 #> id-100  1.20  Good     SI2  6344 6.72 6.68"},{"path":"https://william-swl.github.io/baizer/reference/check_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"check arguments by custom function — check_arg","title":"check arguments by custom function — check_arg","text":"check arguments custom function","code":""},{"path":"https://william-swl.github.io/baizer/reference/check_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check arguments by custom function — check_arg","text":"","code":"check_arg(..., n = 2, fun = not.null)"},{"path":"https://william-swl.github.io/baizer/reference/check_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check arguments by custom function — check_arg","text":"... arguments n many arguments meet custom conditions fun custom conditions defined function","code":""},{"path":"https://william-swl.github.io/baizer/reference/check_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check arguments by custom function — check_arg","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/check_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check arguments by custom function — check_arg","text":"","code":"x <- 1 y <- 3 z <- NULL  func <- function(x = NULL, y = NULL, z = NULL) {   if (check_arg(x, y, z, n = 2)) {     print(\"As expected, two arguments is not NULL\")   }    if (check_arg(x, y, z, n = 1, method = ~ .x < 2)) {     print(\"As expected, one argument less than 2\")   } }"},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":null,"dir":"Reference","previous_headings":"","what":"get the command line arguments — cmdargs","title":"get the command line arguments — cmdargs","text":"get command line arguments","code":""},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the command line arguments — cmdargs","text":"","code":"cmdargs(x = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the command line arguments — cmdargs","text":"x one 'wd, R_env, script_path, script_dir, env_configs'","code":""},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the command line arguments — cmdargs","text":"list arguments, single value select argument","code":""},{"path":"https://william-swl.github.io/baizer/reference/cmdargs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get the command line arguments — cmdargs","text":"","code":"cmdargs() #> $wd #> [1] \"/home/runner/work/baizer/baizer/docs/reference\" #>  #> $R_env #> [1] \"/opt/R/4.3.1/lib/R/bin/exec/R\" #>  #> $script_path #> [1] \"/home/runner/work/_temp/31f02384-c009-4f99-b213-b7f73a343160\" #>  #> $script_dir #> [1] \"/home/runner/work/_temp\" #>  #> $env_configs #> [1] \"--no-echo\"                                                           #> [2] \"--no-restore\"                                                        #> [3] \"--file=/home/runner/work/_temp/31f02384-c009-4f99-b213-b7f73a343160\" #>"},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"dump a named vector into character — collapse_vector","title":"dump a named vector into character — collapse_vector","text":"dump named vector character","code":""},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dump a named vector into character — collapse_vector","text":"","code":"collapse_vector(named_vector, front_name = TRUE, collapse = \",\")"},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dump a named vector into character — collapse_vector","text":"named_vector named vector front_name TRUE, put names former collapse collapse separator","code":""},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dump a named vector into character — collapse_vector","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/collapse_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dump a named vector into character — collapse_vector","text":"","code":"collapse_vector(c(e = 1:4), front_name = TRUE, collapse = \";\") #> [1] \"e1(1);e2(2);e3(3);e4(4)\""},{"path":"https://william-swl.github.io/baizer/reference/combn_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"combine multiple vectors into one — combn_vector","title":"combine multiple vectors into one — combn_vector","text":"combine multiple vectors one","code":""},{"path":"https://william-swl.github.io/baizer/reference/combn_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combine multiple vectors into one — combn_vector","text":"","code":"combn_vector(..., method = \"first\", invalid = NA)"},{"path":"https://william-swl.github.io/baizer/reference/combn_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combine multiple vectors into one — combn_vector","text":"... vectors method combine, one first|last, one sum|mean|median numeric vector, characters (e.g. ,|.| |;) character vector invalid invalid value ignore, NA default","code":""},{"path":"https://william-swl.github.io/baizer/reference/combn_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combine multiple vectors into one — combn_vector","text":"combined vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/combn_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"combine multiple vectors into one — combn_vector","text":"","code":"x1 <- c(1, 2, NA, NA) x2 <- c(3, NA, 2, NA) x3 <- c(4, NA, NA, 3)  combn_vector(x1, x2, x3, method = \"sum\") #> [1] 8 2 2 3"},{"path":"https://william-swl.github.io/baizer/reference/correct_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"correct the numbers to a target ratio — correct_ratio","title":"correct the numbers to a target ratio — correct_ratio","text":"correct numbers target ratio","code":""},{"path":"https://william-swl.github.io/baizer/reference/correct_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"correct the numbers to a target ratio — correct_ratio","text":"","code":"correct_ratio(raw, target, digits = 0)"},{"path":"https://william-swl.github.io/baizer/reference/correct_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"correct the numbers to a target ratio — correct_ratio","text":"raw raw numbers target target ratio digits result digits","code":""},{"path":"https://william-swl.github.io/baizer/reference/correct_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"correct the numbers to a target ratio — correct_ratio","text":"corrected number vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/correct_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"correct the numbers to a target ratio — correct_ratio","text":"","code":"correct_ratio(c(10, 10), c(3, 5)) #> [1]  6 10  # support ratio as a float correct_ratio(c(100, 100), c(0.2, 0.8)) #> [1]  25 100  # more numbers correct_ratio(10:13, c(2, 3, 4, 6)) #> [1]  4  6  9 13  # with digits after decimal point correct_ratio(c(10, 10), c(1, 4), digits = 1) #> [1]  2.5 10.0"},{"path":"https://william-swl.github.io/baizer/reference/cross_count.html","id":null,"dir":"Reference","previous_headings":"","what":"count two columns as a cross-tabulation table — cross_count","title":"count two columns as a cross-tabulation table — cross_count","text":"count two columns cross-tabulation table","code":""},{"path":"https://william-swl.github.io/baizer/reference/cross_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count two columns as a cross-tabulation table — cross_count","text":"","code":"cross_count(df, row, col, method = \"n\", digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/cross_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count two columns as a cross-tabulation table — cross_count","text":"df tibble row column rownames output col column colnames output method one n|count, rowr|row_ratio, colr|col_ratio digits digits ratios","code":""},{"path":"https://william-swl.github.io/baizer/reference/cross_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"count two columns as a cross-tabulation table — cross_count","text":"data.frame","code":""},{"path":"https://william-swl.github.io/baizer/reference/cross_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count two columns as a cross-tabulation table — cross_count","text":"","code":"cross_count(mini_diamond, cut, clarity) #>       I1 IF SI1 SI2 VS1 VS2 VVS1 VVS2 #> Fair   5  4   5   4   3   5    5    4 #> Good   5  5   4   4   2   4    4    3 #> Ideal  4  4   5   4   5   2    5    5  # show the ratio in the row cross_count(mini_diamond, cut, clarity, method = \"rowr\") #>         I1   IF  SI1  SI2  VS1  VS2 VVS1 VVS2 #> Fair  0.14 0.11 0.14 0.11 0.09 0.14 0.14 0.11 #> Good  0.16 0.16 0.13 0.13 0.06 0.13 0.13 0.10 #> Ideal 0.12 0.12 0.15 0.12 0.15 0.06 0.15 0.15  # show the ratio in the col cross_count(mini_diamond, cut, clarity, method = \"colr\") #>         I1   IF  SI1  SI2 VS1  VS2 VVS1 VVS2 #> Fair  0.36 0.31 0.36 0.33 0.3 0.45 0.36 0.33 #> Good  0.36 0.38 0.29 0.33 0.2 0.36 0.29 0.25 #> Ideal 0.29 0.31 0.36 0.33 0.5 0.18 0.36 0.42"},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"detect possible duplication vector, ignore case, blank special character","code":""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"","code":"detect_dup(vector, index = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"vector vector possibly duplication index return duplication index","code":""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"duplication sub-vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/detect_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect possible duplication in a vector, ignore case,\nblank and special character — detect_dup","text":"","code":"detect_dup(c(\"a\", \"C_\", \"c -\", \"#A\")) #> [1] \"a\"   \"#A\"  \"C_\"  \"c -\""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":null,"dir":"Reference","previous_headings":"","what":"the index of different character — diff_index","title":"the index of different character — diff_index","text":"index different character","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the index of different character — diff_index","text":"","code":"diff_index(s1, s2, nth = NULL, ignore_case = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the index of different character — diff_index","text":"s1 string1 s2 string2 nth just return nth index ignore_case ignore upper lower cases","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the index of different character — diff_index","text":"list different character indices","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the index of different character — diff_index","text":"","code":"diff_index(\"AAAA\", \"ABBA\") #> [[1]] #> [1] 2 3 #>"},{"path":"https://william-swl.github.io/baizer/reference/diff_tb.html","id":null,"dir":"Reference","previous_headings":"","what":"differences between two tibbles — diff_tb","title":"differences between two tibbles — diff_tb","text":"differences two tibbles","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_tb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"differences between two tibbles — diff_tb","text":"","code":"diff_tb(old, new)"},{"path":"https://william-swl.github.io/baizer/reference/diff_tb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"differences between two tibbles — diff_tb","text":"old old tibble new new tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_tb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"differences between two tibbles — diff_tb","text":"comparation tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/diff_tb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"differences between two tibbles — diff_tb","text":"","code":"tb1 <- gen_tb(fill = \"int\", seed = 1)  tb2 <- gen_tb(fill = \"int\", seed = 3)  diff_tb(tb1, tb2) #> # A tibble: 6 × 5 #>   compare V1    V2    V3    V4    #>   <chr>   <chr> <chr> <chr> <chr> #> 1 -[1,]   -7    15    4     -4    #> 2 +[1,]   -10   -12   0     12    #> 3 -[2,]   1     3     7     15    #> 4 +[2,]   -3    1     11    -8    #> 5 -[3,]   -9    -9    5     3     #> 6 +[3,]   2     0     -13   -12"},{"path":"https://william-swl.github.io/baizer/reference/dx_tb.html","id":null,"dir":"Reference","previous_headings":"","what":"diagnosis a tibble for character NA, NULL, all T/F column, blank in cell — dx_tb","title":"diagnosis a tibble for character NA, NULL, all T/F column, blank in cell — dx_tb","text":"diagnosis tibble character NA, NULL, T/F column, blank cell","code":""},{"path":"https://william-swl.github.io/baizer/reference/dx_tb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"diagnosis a tibble for character NA, NULL, all T/F column, blank in cell — dx_tb","text":"","code":"dx_tb(x)"},{"path":"https://william-swl.github.io/baizer/reference/dx_tb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"diagnosis a tibble for character NA, NULL, all T/F column, blank in cell — dx_tb","text":"x tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/dx_tb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"diagnosis a tibble for character NA, NULL, all T/F column, blank in cell — dx_tb","text":"list","code":""},{"path":"https://william-swl.github.io/baizer/reference/dx_tb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"diagnosis a tibble for character NA, NULL, all T/F column, blank in cell — dx_tb","text":"","code":"x <- tibble::tibble(   c1 = c(\"NA\", NA, \"a\", \"b\"),   c2 = c(\"c\", \"d\", \"e\", \"NULL\"),   c3 = c(\"T\", \"F\", \"F\", \"T\"),   c4 = c(\"T\", \"F\", \"F\", NA),   c5 = c(\"\", \" \", \"\\t\", \"\\n\") )  dx_tb(x) #> $chr_na #> # A tibble: 1 × 2 #>     row   col #>   <int> <int> #> 1     1     1 #>  #> $chr_null #> # A tibble: 1 × 2 #>     row   col #>   <int> <int> #> 1     4     2 #>  #> $only_tf #> [1] 3 4 #>  #> $blank_in_cell #> [1] \" \"  \"\\t\" \"\\n\" #>  #> $stat #>        chr_na      chr_null       only_tf blank_in_cell  #>             1             1             2             3  #>  #> $pass #> [1] FALSE #>"},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"detect whether directory is empty recursively — empty_dir","title":"detect whether directory is empty recursively — empty_dir","text":"detect whether directory empty recursively","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect whether directory is empty recursively — empty_dir","text":"","code":"empty_dir(dir)"},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect whether directory is empty recursively — empty_dir","text":"dir directory","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect whether directory is empty recursively — empty_dir","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect whether directory is empty recursively — empty_dir","text":"","code":"# create an empty directory dir.create(\"some/deep/path/in/a/folder\", recursive = TRUE) empty_dir(\"some/deep/path/in/a/folder\") #> [1] TRUE  # create an empty file file.create(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE empty_dir(\"some/deep/path/in/a/folder\") #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] TRUE  # create a file with only character of length 0 write(\"\", \"some/deep/path/in/a/folder/there_is_a_file.txt\") empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE  # clean unlink(\"some\", recursive = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":null,"dir":"Reference","previous_headings":"","what":"detect whether file is empty recursively — empty_file","title":"detect whether file is empty recursively — empty_file","text":"detect whether file empty recursively","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect whether file is empty recursively — empty_file","text":"","code":"empty_file(path, strict = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect whether file is empty recursively — empty_file","text":"path path file strict FALSE default. TRUE, file one character length 0 considered empty","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect whether file is empty recursively — empty_file","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/empty_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect whether file is empty recursively — empty_file","text":"","code":"# create an empty directory dir.create(\"some/deep/path/in/a/folder\", recursive = TRUE) empty_dir(\"some/deep/path/in/a/folder\") #> [1] TRUE  # create an empty file file.create(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE empty_dir(\"some/deep/path/in/a/folder\") #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] TRUE  # create a file with only character of length 0 write(\"\", \"some/deep/path/in/a/folder/there_is_a_file.txt\") empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\", strict = TRUE) #> [1] FALSE empty_file(\"some/deep/path/in/a/folder/there_is_a_file.txt\") #> [1] TRUE  # clean unlink(\"some\", recursive = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/exist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a matrix to show whether the item in each element of a list — exist_matrix","title":"generate a matrix to show whether the item in each element of a list — exist_matrix","text":"generate matrix show whether item element list","code":""},{"path":"https://william-swl.github.io/baizer/reference/exist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a matrix to show whether the item in each element of a list — exist_matrix","text":"","code":"exist_matrix(x, n_lim = 0, n_top = NULL, sort_items = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/exist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a matrix to show whether the item in each element of a list — exist_matrix","text":"x list character vectors n_lim n limit keep items result n_top keep top n items result sort_items function sort items, item frequency default","code":""},{"path":"https://william-swl.github.io/baizer/reference/exist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a matrix to show whether the item in each element of a list — exist_matrix","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/exist_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate a matrix to show whether the item in each element of a list — exist_matrix","text":"","code":"x <- 1:5 %>% purrr::map(   ~ gen_char(to = \"k\", n = 5, random = TRUE, seed = .x) ) exist_matrix(x) #> # A tibble: 5 × 11 #>   g     i     k     a     b     c     d     e     f     h     j     #> * <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> #> 1 TRUE  TRUE  FALSE TRUE  TRUE  FALSE TRUE  FALSE FALSE FALSE FALSE #> 2 FALSE FALSE FALSE TRUE  FALSE FALSE FALSE TRUE  TRUE  TRUE  FALSE #> 3 TRUE  FALSE FALSE FALSE FALSE FALSE TRUE  TRUE  FALSE FALSE TRUE  #> 4 TRUE  FALSE TRUE  FALSE FALSE TRUE  FALSE FALSE FALSE TRUE  FALSE #> 5 FALSE TRUE  TRUE  FALSE TRUE  FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"pileup the subexpressions which is atomic — expr_pileup","title":"pileup the subexpressions which is atomic — expr_pileup","text":"pileup subexpressions atomic","code":""},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pileup the subexpressions which is atomic — expr_pileup","text":"","code":"expr_pileup(ex)"},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pileup the subexpressions which is atomic — expr_pileup","text":"ex expression","code":""},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pileup the subexpressions which is atomic — expr_pileup","text":"character vector subexpressions","code":""},{"path":"https://william-swl.github.io/baizer/reference/expr_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pileup the subexpressions which is atomic — expr_pileup","text":"","code":"ex <- rlang::expr(a == 2 & b == 3 | !b & x + 2) expr_pileup(ex) #> [1] \"|\"      \"&\"      \"a == 2\" \"b == 3\" \"&\"      \"!b\"     \"x + 2\""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":null,"dir":"Reference","previous_headings":"","what":"extract key and values for a character vector — extract_kv","title":"extract key and values for a character vector — extract_kv","text":"extract key values character vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract key and values for a character vector — extract_kv","text":"","code":"extract_kv(v, sep = \": \", key_loc = 1, value_loc = 2)"},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract key and values for a character vector — extract_kv","text":"v character vector sep separator key value key_loc key location value_loc value location","code":""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract key and values for a character vector — extract_kv","text":"named character vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/extract_kv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract key and values for a character vector — extract_kv","text":"","code":"extract_kv(c(\"x: 1\", \"y: 2\")) #>   x   y  #> \"1\" \"2\""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":null,"dir":"Reference","previous_headings":"","what":"fancy count to show an extended column — fancy_count","title":"fancy count to show an extended column — fancy_count","text":"fancy count show extended column","code":""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fancy count to show an extended column — fancy_count","text":"","code":"fancy_count(df, ..., ext = NULL, ext_fmt = \"count\", sort = FALSE, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fancy count to show an extended column — fancy_count","text":"df tibble ... arguments dplyr::count() ext extended column ext_fmt count|ratio|clean, output format extended column sort sort frequency digits ext_fmt=ratio, digits ratio","code":""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fancy count to show an extended column — fancy_count","text":"count tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/fancy_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fancy count to show an extended column — fancy_count","text":"","code":"fancy_count(mini_diamond, cut, ext = clarity) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"ratio\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                      #>   <chr> <int> <dbl> <chr>                                                        #> 1 Fair     35  0.35 I1(0.14),IF(0.11),SI1(0.14),SI2(0.11),VS1(0.09),VS2(0.14),V… #> 2 Good     31  0.31 I1(0.16),IF(0.16),SI1(0.13),SI2(0.13),VS1(0.06),VS2(0.13),V… #> 3 Ideal    34  0.34 I1(0.12),IF(0.12),SI1(0.15),SI2(0.12),VS1(0.15),VS2(0.06),V…  fancy_count(mini_diamond, cut, ext = clarity, ext_fmt = \"clean\") #> # A tibble: 3 × 4 #>   cut       n     r clarity                         #>   <chr> <int> <dbl> <chr>                           #> 1 Fair     35  0.35 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 2 Good     31  0.31 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2 #> 3 Ideal    34  0.34 I1,IF,SI1,SI2,VS1,VS2,VVS1,VVS2  fancy_count(mini_diamond, cut, ext = clarity, sort = FALSE) #> # A tibble: 3 × 4 #>   cut       n     r clarity                                                 #>   <chr> <int> <dbl> <chr>                                                   #> 1 Fair     35  0.35 I1(5),IF(4),SI1(5),SI2(4),VS1(3),VS2(5),VVS1(5),VVS2(4) #> 2 Good     31  0.31 I1(5),IF(5),SI1(4),SI2(4),VS1(2),VS2(4),VVS1(4),VVS2(3) #> 3 Ideal    34  0.34 I1(4),IF(4),SI1(5),SI2(4),VS1(5),VS2(2),VVS1(5),VVS2(5)  fancy_count(mini_diamond, cut, clarity, ext = id) %>% head(5) #> # A tibble: 5 × 5 #>   cut   clarity     n     r id                                           #>   <chr> <chr>   <int> <dbl> <chr>                                        #> 1 Fair  I1          5  0.05 id-20(1),id-23(1),id-28(1),id-32(1),id-48(1) #> 2 Fair  IF          4  0.04 id-12(1),id-45(1),id-89(1),id-95(1)          #> 3 Fair  SI1         5  0.05 id-1(1),id-64(1),id-65(1),id-68(1),id-76(1)  #> 4 Fair  SI2         4  0.04 id-25(1),id-40(1),id-6(1),id-99(1)           #> 5 Fair  VS1         3  0.03 id-36(1),id-43(1),id-85(1)"},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":null,"dir":"Reference","previous_headings":"","what":"fetch character from strings — fetch_char","title":"fetch character from strings — fetch_char","text":"fetch character strings","code":""},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetch character from strings — fetch_char","text":"","code":"fetch_char(s, index_list, na.rm = FALSE, collapse = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetch character from strings — fetch_char","text":"s strings index_list index nth character, can output diff_index same_index na.rm remove NA values results collapse optional string used combine characters string","code":""},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetch character from strings — fetch_char","text":"list characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/fetch_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fetch character from strings — fetch_char","text":"","code":"fetch_char(rep(\"ABC\", 3), list(1, 2, 3)) #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"B\" #>  #> [[3]] #> [1] \"C\" #>"},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":null,"dir":"Reference","previous_headings":"","what":"apply tbflt on dplyr filter — filterC","title":"apply tbflt on dplyr filter — filterC","text":"apply tbflt dplyr filter","code":""},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply tbflt on dplyr filter — filterC","text":"","code":"filterC(.data, tbflt = NULL, .by = NULL, usecol = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply tbflt on dplyr filter — filterC","text":".data tibble tbflt tbflt object .group , .argument dplyr::filter usecol TRUE (default), use default behavior dplyr::filter(), allows usage variable colnames, filter data column. FALSE, check whether variables right side ==,>,<,>=,<= names columns raise error, sake predictable results. can always ignore argument know use .env !!","code":""},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply tbflt on dplyr filter — filterC","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/filterC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply tbflt on dplyr filter — filterC","text":"","code":"c1 <- tbflt(cut == \"Fair\")  c2 <- tbflt(x > 8)  mini_diamond %>%   filterC(c1) %>%   head(5) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #> 2 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 3 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> 4 id-12  0.71 Fair  IF       3205  5.87  5.81 #> 5 id-18  0.34 Fair  VVS1     1012  4.8   4.76  mini_diamond %>% filterC(c1 & c2) #> # A tibble: 3 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-68  2.32 Fair  SI1     18026  8.47  8.31    x <- 8 cond <- tbflt(y > x)  # variable `x` not used because of column `x` in `mini_diamond` filterC(mini_diamond, cond) #> # A tibble: 53 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  2 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  3 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  4 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-11  1.02 Good  VVS1     7861  6.37  6.4  #>  7 id-13  0.56 Ideal SI1      1633  5.31  5.32 #>  8 id-14  0.3  Ideal VVS2      812  4.33  4.39 #>  9 id-15  0.28 Good  IF        612  4.09  4.12 #> 10 id-16  0.41 Good  I1        467  4.7   4.74 #> # ℹ 43 more rows  # will raise error because `x`  is on the right side of `>` # filterC(mini_diamond, cond, usecol=FALSE)  # if you know how to use `.env` or `!!`, forget argument `usecol`! cond <- tbflt(y > !!x) filterC(mini_diamond, cond) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57  cond <- tbflt(y > .env$x) filterC(mini_diamond, cond) #> # A tibble: 5 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-6   2.02 Fair  SI2     14080  8.33  8.37 #> 2 id-48  2.01 Fair  I1       7294  8.3   8.19 #> 3 id-49  2.16 Ideal I1       8709  8.31  8.26 #> 4 id-68  2.32 Fair  SI1     18026  8.47  8.31 #> 5 id-97  2.61 Good  SI2     13784  8.66  8.57"},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"trans fixed string into regular expression string — fix_to_regex","title":"trans fixed string into regular expression string — fix_to_regex","text":"trans fixed string regular expression string","code":""},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans fixed string into regular expression string — fix_to_regex","text":"","code":"fix_to_regex(p)"},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans fixed string into regular expression string — fix_to_regex","text":"p raw fixed pattern","code":""},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans fixed string into regular expression string — fix_to_regex","text":"regex pattern","code":""},{"path":"https://william-swl.github.io/baizer/reference/fix_to_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans fixed string into regular expression string — fix_to_regex","text":"","code":"fix_to_regex(\"ABC|?(*)\") #> [1] \"ABC\\\\|\\\\?\\\\(\\\\*\\\\)\""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"from float number to percent number — float_to_percent","title":"from float number to percent number — float_to_percent","text":"float number percent number","code":""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from float number to percent number — float_to_percent","text":"","code":"float_to_percent(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from float number to percent number — float_to_percent","text":"x number digits hold n digits decimal point","code":""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from float number to percent number — float_to_percent","text":"percent character x","code":""},{"path":"https://william-swl.github.io/baizer/reference/float_to_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from float number to percent number — float_to_percent","text":"","code":"float_to_percent(0.12) #> [1] \"12.00%\""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"farthest point sampling (FPS) for a vector — fps_vector","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"farthest point sampling (FPS) vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"","code":"fps_vector(v, n, method = \"round\")"},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"v vector n sample size method round|floor|ceiling, method used trans integer","code":""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"sampled vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/fps_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"farthest point sampling (FPS) for a vector — fps_vector","text":"","code":"fps_vector(1:10, 4) #> [1]  1  4  7 10"},{"path":"https://william-swl.github.io/baizer/reference/gen_char.html","id":null,"dir":"Reference","previous_headings":"","what":"generate characters — gen_char","title":"generate characters — gen_char","text":"generate characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate characters — gen_char","text":"","code":"gen_char(   from = NULL,   to = NULL,   n = NULL,   random = FALSE,   allow_dup = TRUE,   add = NULL,   seed = NULL )"},{"path":"https://william-swl.github.io/baizer/reference/gen_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate characters — gen_char","text":"left bound, lower case letter right bound, lower case letter n number characters generate random random generation allow_dup allow duplication random generation add add extra characters base::letters seed random seed","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate characters — gen_char","text":"generated characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate characters — gen_char","text":"","code":"gen_char(from = \"g\", n = 5) #> [1] \"g\" \"h\" \"i\" \"j\" \"k\" gen_char(to = \"g\", n = 5) #> [1] \"c\" \"d\" \"e\" \"f\" \"g\" gen_char(from = \"g\", to = \"j\") #> [1] \"g\" \"h\" \"i\" \"j\" gen_char(from = \"t\", n = 5, random = TRUE) #> [1] \"x\" \"y\" \"z\" \"x\" \"z\" gen_char(   from = \"x\", n = 5, random = TRUE,   allow_dup = FALSE, add = c(\"+\", \"-\") ) #> [1] \"+\" \"y\" \"x\" \"z\" \"-\""},{"path":"https://william-swl.github.io/baizer/reference/gen_combn.html","id":null,"dir":"Reference","previous_headings":"","what":"generate all combinations — gen_combn","title":"generate all combinations — gen_combn","text":"generate combinations","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_combn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate all combinations — gen_combn","text":"","code":"gen_combn(x, n = 2)"},{"path":"https://william-swl.github.io/baizer/reference/gen_combn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate all combinations — gen_combn","text":"x vector n numbers element combine","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_combn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate all combinations — gen_combn","text":"combinations","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_combn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate all combinations — gen_combn","text":"","code":"gen_combn(1:4, n = 2) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 1 3 #>  #> [[3]] #> [1] 1 4 #>  #> [[4]] #> [1] 2 3 #>  #> [[5]] #> [1] 2 4 #>  #> [[6]] #> [1] 3 4 #>"},{"path":"https://william-swl.github.io/baizer/reference/gen_outlier.html","id":null,"dir":"Reference","previous_headings":"","what":"generate outliers from a series of number — gen_outlier","title":"generate outliers from a series of number — gen_outlier","text":"generate outliers series number","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_outlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate outliers from a series of number — gen_outlier","text":"","code":"gen_outlier(   x,   n,   digits = 0,   side = \"both\",   lim = NULL,   assign_n = NULL,   only_out = TRUE )"},{"path":"https://william-swl.github.io/baizer/reference/gen_outlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate outliers from a series of number — gen_outlier","text":"x number vector n number outliers generate digits digits outliers side one , low, high lim two-length vector assign limitations outliers method , outliers limited [lim[1], low_outlier_threshold] [high_outlier_threshold, lim[2]] ; method low, outliers limited [lim[1], min(low_outlier_threshold, lim[2])] ; method high, outliers limited [max(high_outlier_threshold, lim[1]), lim[2]] assign_n manually assign number low outliers high outliers method only_out return outliers","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_outlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate outliers from a series of number — gen_outlier","text":"number vector outliers","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_outlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate outliers from a series of number — gen_outlier","text":"","code":"x <- seq(0, 100, 1)  gen_outlier(x, 10) #>  [1]  -93 -183 -144 -130  -69  257  154  275  269  257  # generation limits gen_outlier(x, 10, lim = c(-80, 160)) #>  [1] -67 -74 -61 -65 -69 159 153 154 152 152  # assign the low and high outliers gen_outlier(x, 10, lim = c(-80, 160), assign_n = c(0.1, 0.9)) #>  [1] -76 157 153 155 156 150 156 156 155 159  # just generate low outliers gen_outlier(x, 10, side = \"low\") #>  [1] -171  -80 -164  -72 -186 -138  -68 -135  -81 -170  # return with raw vector gen_outlier(x, 10, only_out = FALSE) #>   [1] -122  -66 -171 -159 -113  265  272  276  185  290    0    1    2    3    4 #>  [16]    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 #>  [31]   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34 #>  [46]   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49 #>  [61]   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 #>  [76]   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79 #>  [91]   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94 #> [106]   95   96   97   98   99  100"},{"path":"https://william-swl.github.io/baizer/reference/gen_str.html","id":null,"dir":"Reference","previous_headings":"","what":"generate strings — gen_str","title":"generate strings — gen_str","text":"generate strings","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate strings — gen_str","text":"","code":"gen_str(n = 1, len = 3, seed = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/gen_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate strings — gen_str","text":"n number strings generate len string length seed random seed","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate strings — gen_str","text":"string","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate strings — gen_str","text":"","code":"gen_str(n = 2, len = 3) #> [1] \"iox\" \"hbi\""},{"path":"https://william-swl.github.io/baizer/reference/gen_tb.html","id":null,"dir":"Reference","previous_headings":"","what":"generate tibbles — gen_tb","title":"generate tibbles — gen_tb","text":"generate tibbles","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_tb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate tibbles — gen_tb","text":"","code":"gen_tb(nrow = 3, ncol = 4, fill = \"float\", colnames = NULL, seed = NULL, ...)"},{"path":"https://william-swl.github.io/baizer/reference/gen_tb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate tibbles — gen_tb","text":"nrow number rows ncol number columns fill fill , one float, int, char, str colnames names columns seed random seed ... parameters rnorm, gen_char, gen_str","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_tb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate tibbles — gen_tb","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/gen_tb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate tibbles — gen_tb","text":"","code":"gen_tb() #> # A tibble: 3 × 4 #>       V1     V2     V3      V4 #>    <dbl>  <dbl>  <dbl>   <dbl> #> 1  0.394 -0.577 -0.287 -0.611  #> 2 -1.18   0.201  1.00  -0.0324 #> 3 -0.119  0.689 -1.44  -1.52    gen_tb(fill = \"str\", nrow = 3, ncol = 4, len = 3) #> # A tibble: 3 × 4 #>   V1    V2    V3    V4    #>   <chr> <chr> <chr> <chr> #> 1 erm   frx   ayv   zys   #> 2 nku   xmh   ngw   mzz   #> 3 jwt   kgu   apc   gil"},{"path":"https://william-swl.github.io/baizer/reference/generate_ticks.html","id":null,"dir":"Reference","previous_headings":"","what":"generate ticks for a number vector — generate_ticks","title":"generate ticks for a number vector — generate_ticks","text":"generate ticks number vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/generate_ticks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate ticks for a number vector — generate_ticks","text":"","code":"generate_ticks(x, expect_ticks = 10)"},{"path":"https://william-swl.github.io/baizer/reference/generate_ticks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate ticks for a number vector — generate_ticks","text":"x number vector expect_ticks expected number ticks, may little different result","code":""},{"path":"https://william-swl.github.io/baizer/reference/generate_ticks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate ticks for a number vector — generate_ticks","text":"ticks number","code":""},{"path":"https://william-swl.github.io/baizer/reference/generate_ticks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate ticks for a number vector — generate_ticks","text":"","code":"generate_ticks(c(176, 198, 264)) #>  [1] 175 185 195 205 215 225 235 245 255 265"},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"geometric mean — geom_mean","title":"geometric mean — geom_mean","text":"geometric mean","code":""},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geometric mean — geom_mean","text":"","code":"geom_mean(x, na.rm = TRUE)"},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geometric mean — geom_mean","text":"x value na.rm remove NA ","code":""},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geometric mean — geom_mean","text":"geometric mean value","code":""},{"path":"https://william-swl.github.io/baizer/reference/geom_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geometric mean — geom_mean","text":"","code":"geom_mean(1, 9) #> [1] 1"},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"not equal calculation operator, support NA — %neq%","title":"not equal calculation operator, support NA — %neq%","text":"equal calculation operator, support NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"not equal calculation operator, support NA — %neq%","text":"","code":"x %neq% y"},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"not equal calculation operator, support NA — %neq%","text":"x value x y value y","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"not equal calculation operator, support NA — %neq%","text":"logical value, TRUE x y equal","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-neq-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"not equal calculation operator, support NA — %neq%","text":"","code":"1 %neq% NA #> [1] TRUE"},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"not in calculation operator — %nin%","title":"not in calculation operator — %nin%","text":"calculation operator","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"not in calculation operator — %nin%","text":"","code":"left %nin% right"},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"not in calculation operator — %nin%","text":"left left element right right element","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"not in calculation operator — %nin%","text":"logical value, TRUE left right","code":""},{"path":"https://william-swl.github.io/baizer/reference/grapes-nin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"not in calculation operator — %nin%","text":"","code":"0 %nin% 1:4 #> [1] TRUE"},{"path":"https://william-swl.github.io/baizer/reference/group_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"group character vector by a regex pattern — group_vector","title":"group character vector by a regex pattern — group_vector","text":"group character vector regex pattern","code":""},{"path":"https://william-swl.github.io/baizer/reference/group_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"group character vector by a regex pattern — group_vector","text":"","code":"group_vector(x, pattern = \"\\\\w\")"},{"path":"https://william-swl.github.io/baizer/reference/group_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"group character vector by a regex pattern — group_vector","text":"x character vector pattern regex pattern, '\\w' default","code":""},{"path":"https://william-swl.github.io/baizer/reference/group_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"group character vector by a regex pattern — group_vector","text":"list","code":""},{"path":"https://william-swl.github.io/baizer/reference/group_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"group character vector by a regex pattern — group_vector","text":"","code":"v <- c(   stringr::str_c(\"A\", c(1, 2, 9, 10, 11, 12, 99, 101, 102)),   stringr::str_c(\"B\", c(1, 2, 9, 10, 21, 32, 99, 101, 102)) ) %>% sample()  group_vector(v) #> $A #> [1] \"A12\"  \"A10\"  \"A101\" \"A102\" \"A9\"   \"A99\"  \"A2\"   \"A11\"  \"A1\"   #>  #> $B #> [1] \"B99\"  \"B101\" \"B9\"   \"B10\"  \"B1\"   \"B2\"   \"B21\"  \"B32\"  \"B102\" #>   group_vector(v, pattern = \"\\\\w\\\\d\") #> $A1 #> [1] \"A12\"  \"A10\"  \"A101\" \"A102\" \"A11\"  \"A1\"   #>  #> $A2 #> [1] \"A2\" #>  #> $A9 #> [1] \"A9\"  \"A99\" #>  #> $B1 #> [1] \"B101\" \"B10\"  \"B1\"   \"B102\" #>  #> $B2 #> [1] \"B2\"  \"B21\" #>  #> $B3 #> [1] \"B32\" #>  #> $B9 #> [1] \"B99\" \"B9\"  #>   group_vector(v, pattern = \"\\\\w(\\\\d)\") #> $`1` #>  [1] \"A12\"  \"B101\" \"A10\"  \"B10\"  \"A101\" \"B1\"   \"A102\" \"A11\"  \"B102\" \"A1\"   #>  #> $`2` #> [1] \"B2\"  \"B21\" \"A2\"  #>  #> $`3` #> [1] \"B32\" #>  #> $`9` #> [1] \"B99\" \"B9\"  \"A9\"  \"A99\" #>   # unmatched part will alse be stored group_vector(v, pattern = \"\\\\d{2}\") #> $`10` #> [1] \"B101\" \"A10\"  \"B10\"  \"A101\" \"A102\" \"B102\" #>  #> $`11` #> [1] \"A11\" #>  #> $`12` #> [1] \"A12\" #>  #> $`21` #> [1] \"B21\" #>  #> $`32` #> [1] \"B32\" #>  #> $`99` #> [1] \"B99\" \"A99\" #>  #> $unmatch #> [1] \"B9\" \"B1\" \"B2\" \"A9\" \"A2\" \"A1\" #>"},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"separate numeric x into bins — hist_bins","title":"separate numeric x into bins — hist_bins","text":"separate numeric x bins","code":""},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"separate numeric x into bins — hist_bins","text":"","code":"hist_bins(x, bins = 10, lim = c(min(x), max(x)), breaks = NULL, sort = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"separate numeric x into bins — hist_bins","text":"x numeric vector bins bins number, defaults 10 lim min max limits bins, default c(min(x), max(x)) breaks assign breaks directly ignore bins lim sort sort result tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"separate numeric x into bins — hist_bins","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/hist_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"separate numeric x into bins — hist_bins","text":"","code":"x <- dplyr::pull(mini_diamond, price, id)  hist_bins(x, bins = 20) #> # A tibble: 100 × 5 #>    id    value  start    end   bin #>    <chr> <int>  <dbl>  <dbl> <int> #>  1 id-1   3027  2218.  3097.     3 #>  2 id-2  11746 11000. 11879.    13 #>  3 id-3   2029  1340.  2218.     2 #>  4 id-4   9452  9244  10122.    11 #>  5 id-5   2498  2218.  3097.     3 #>  6 id-6  14080 13635  14513.    16 #>  7 id-7    752   462   1340.     1 #>  8 id-8   1029   462   1340.     1 #>  9 id-9   5590  4853   5731.     6 #> 10 id-10  1691  1340.  2218.     2 #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/int_digits.html","id":null,"dir":"Reference","previous_headings":"","what":"trans numbers to a fixed integer digit length — int_digits","title":"trans numbers to a fixed integer digit length — int_digits","text":"trans numbers fixed integer digit length","code":""},{"path":"https://william-swl.github.io/baizer/reference/int_digits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans numbers to a fixed integer digit length — int_digits","text":"","code":"int_digits(x, digits = 2, scale_factor = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/int_digits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans numbers to a fixed integer digit length — int_digits","text":"x number digits integer digit length scale_factor return scale_factor instead value","code":""},{"path":"https://william-swl.github.io/baizer/reference/int_digits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans numbers to a fixed integer digit length — int_digits","text":"number","code":""},{"path":"https://william-swl.github.io/baizer/reference/int_digits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans numbers to a fixed integer digit length — int_digits","text":"","code":"int_digits(0.0332, 1) #> [1] 3.32"},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":null,"dir":"Reference","previous_headings":"","what":"if a number only have zeros — is.zero","title":"if a number only have zeros — is.zero","text":"number zeros","code":""},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"if a number only have zeros — is.zero","text":"","code":"is.zero(x)"},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"if a number only have zeros — is.zero","text":"x number","code":""},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"if a number only have zeros — is.zero","text":"zero ","code":""},{"path":"https://william-swl.github.io/baizer/reference/is.zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"if a number only have zeros — is.zero","text":"","code":"is.zero(c(\"0.000\", \"0.102\", NA)) #> [1]  TRUE FALSE    NA"},{"path":"https://william-swl.github.io/baizer/reference/list2tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"trans list into tibble — list2tibble","title":"trans list into tibble — list2tibble","text":"trans list tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/list2tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans list into tibble — list2tibble","text":"","code":"list2tibble(x, colnames = NULL, method = \"row\")"},{"path":"https://william-swl.github.io/baizer/reference/list2tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans list into tibble — list2tibble","text":"x list colnames colnames output method one row, col, set item row col, default row","code":""},{"path":"https://william-swl.github.io/baizer/reference/list2tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans list into tibble — list2tibble","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/list2tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans list into tibble — list2tibble","text":"","code":"x <- list(   c(\"a\", \"1\"),   c(\"b\", \"2\"),   c(\"c\", \"3\") )  list2tibble(x, colnames = c(\"char\", \"num\")) #> # A tibble: 3 × 2 #>   char  num   #>   <chr> <chr> #> 1 a     1     #> 2 b     2     #> 3 c     3      x <- list(   c(\"a\", \"b\", \"c\"),   c(\"1\", \"2\", \"3\") )  list2tibble(x, method = \"col\") #> # A tibble: 3 × 2 #>   V1    V2    #>   <chr> <chr> #> 1 a     1     #> 2 b     2     #> 3 c     3"},{"path":"https://william-swl.github.io/baizer/reference/melt_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"melt a vector into single value — melt_vector","title":"melt a vector into single value — melt_vector","text":"melt vector single value","code":""},{"path":"https://william-swl.github.io/baizer/reference/melt_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"melt a vector into single value — melt_vector","text":"","code":"melt_vector(x, method = \"first\", invalid = NA)"},{"path":"https://william-swl.github.io/baizer/reference/melt_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"melt a vector into single value — melt_vector","text":"x vector method melt, one first|last, one sum|mean|median numeric vector, characters (e.g. ,|.| |;) character vector invalid invalid value ignore, NA default","code":""},{"path":"https://william-swl.github.io/baizer/reference/melt_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"melt a vector into single value — melt_vector","text":"melted single value","code":""},{"path":"https://william-swl.github.io/baizer/reference/melt_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"melt a vector into single value — melt_vector","text":"","code":"melt_vector(c(NA, 2, 3), method = \"first\") #> [1] 2  melt_vector(c(NA, 2, 3), method = \"sum\") #> [1] 5  melt_vector(c(NA, 2, 3), method = \",\") #> [1] \"2,3\"  melt_vector(c(NA, 2, Inf), invalid = c(NA, Inf)) #> [1] 2"},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal tibble dataset adjusted from diamond — mini_diamond","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"Minimal tibble dataset adjusted diamond","code":""},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"","code":"mini_diamond"},{"path":[]},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":"mini-diamond","dir":"Reference","previous_headings":"","what":"mini_diamond","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"data frame 100 rows 7 columns: id unique id cut, clarity 2 category variables carat, price, x, y 4 continuous variables","code":""},{"path":"https://william-swl.github.io/baizer/reference/mini_diamond.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Minimal tibble dataset adjusted from diamond — mini_diamond","text":"adjusted ggplot2","code":""},{"path":"https://william-swl.github.io/baizer/reference/mm_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"max-min normalization — mm_norm","title":"max-min normalization — mm_norm","text":"max-min normalization","code":""},{"path":"https://william-swl.github.io/baizer/reference/mm_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"max-min normalization — mm_norm","text":"","code":"mm_norm(x, low = 0, high = 1)"},{"path":"https://william-swl.github.io/baizer/reference/mm_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"max-min normalization — mm_norm","text":"x numeric vector low low limit result, 0 default high high limit result, 1 default","code":""},{"path":"https://william-swl.github.io/baizer/reference/mm_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"max-min normalization — mm_norm","text":"normed vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/mm_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"max-min normalization — mm_norm","text":"","code":"mm_norm(c(1, 3, 4)) #> [1] 0.0000000 0.6666667 1.0000000"},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":null,"dir":"Reference","previous_headings":"","what":"move selected rows to target location — move_row","title":"move selected rows to target location — move_row","text":"move selected rows target location","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"move selected rows to target location — move_row","text":"","code":"move_row(df, rows, .after = FALSE, .before = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"move selected rows to target location — move_row","text":"df tibble rows selected rows indexes .TRUE move selected rows last row, can pass target row index .TRUE move selected rows first row, can pass target row index","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"move selected rows to target location — move_row","text":"reordered tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/move_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"move selected rows to target location — move_row","text":"","code":"move_row(mini_diamond, 3:5, .after = 8) #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  4 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  5 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  6 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  7 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  8 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/near_ticks.html","id":null,"dir":"Reference","previous_headings":"","what":"the ticks near a number — near_ticks","title":"the ticks near a number — near_ticks","text":"ticks near number","code":""},{"path":"https://william-swl.github.io/baizer/reference/near_ticks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the ticks near a number — near_ticks","text":"","code":"near_ticks(x, level = NULL, div = 2)"},{"path":"https://william-swl.github.io/baizer/reference/near_ticks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the ticks near a number — near_ticks","text":"x number level level ticks, 1, 10, 100, etc. div number divisions","code":""},{"path":"https://william-swl.github.io/baizer/reference/near_ticks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the ticks near a number — near_ticks","text":"number vector ticks","code":""},{"path":"https://william-swl.github.io/baizer/reference/near_ticks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the ticks near a number — near_ticks","text":"","code":"near_ticks(3462, level = 10) #> [1] 3460 3465 3470"},{"path":"https://william-swl.github.io/baizer/reference/nearest_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"the nearest ticks around a number — nearest_tick","title":"the nearest ticks around a number — nearest_tick","text":"nearest ticks around number","code":""},{"path":"https://william-swl.github.io/baizer/reference/nearest_tick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the nearest ticks around a number — nearest_tick","text":"","code":"nearest_tick(x, side = \"both\", level = NULL, div = 2)"},{"path":"https://william-swl.github.io/baizer/reference/nearest_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the nearest ticks around a number — nearest_tick","text":"x number side default '', can '|left|right' level level ticks, 1, 10, 100, etc. div number divisions","code":""},{"path":"https://william-swl.github.io/baizer/reference/nearest_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the nearest ticks around a number — nearest_tick","text":"nearest tick number","code":""},{"path":"https://william-swl.github.io/baizer/reference/nearest_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the nearest ticks around a number — nearest_tick","text":"","code":"nearest_tick(3462, level = 10) #> [1] 3460"},{"path":"https://william-swl.github.io/baizer/reference/not.na.html","id":null,"dir":"Reference","previous_headings":"","what":"not NA — not.na","title":"not NA — not.na","text":"NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/not.na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"not NA — not.na","text":"","code":"not.na(x)"},{"path":"https://william-swl.github.io/baizer/reference/not.na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"not NA — not.na","text":"x value","code":""},{"path":"https://william-swl.github.io/baizer/reference/not.na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"not NA — not.na","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/not.na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"not NA — not.na","text":"","code":"not.na(NA) #> [1] FALSE"},{"path":"https://william-swl.github.io/baizer/reference/not.null.html","id":null,"dir":"Reference","previous_headings":"","what":"not NULL — not.null","title":"not NULL — not.null","text":"NULL","code":""},{"path":"https://william-swl.github.io/baizer/reference/not.null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"not NULL — not.null","text":"","code":"not.null(x)"},{"path":"https://william-swl.github.io/baizer/reference/not.null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"not NULL — not.null","text":"x value","code":""},{"path":"https://william-swl.github.io/baizer/reference/not.null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"not NULL — not.null","text":"logical value","code":""},{"path":"https://william-swl.github.io/baizer/reference/not.null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"not NULL — not.null","text":"","code":"not.null(NULL) #> [1] FALSE"},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"wrapper functions process number string prefix suffix","code":""},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"","code":"number_fun_wrapper(   x,   fun = ~.x,   prefix_ext = NULL,   suffix_ext = NULL,   verbose = FALSE )"},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"x number string vector prefix suffix fun process function prefix_ext prefix extension suffix_ext suffix extension verbose print details","code":""},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"processed number prefix suffix","code":""},{"path":"https://william-swl.github.io/baizer/reference/number_fun_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper of the functions to process number string with prefix and suffix — number_fun_wrapper","text":"","code":"number_fun_wrapper(\">=2.134%\", function(x) round(x, 2)) #> [1] \">=2.13%\""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"slice a tibble by an ordered vector — ordered_slice","title":"slice a tibble by an ordered vector — ordered_slice","text":"slice tibble ordered vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slice a tibble by an ordered vector — ordered_slice","text":"","code":"ordered_slice(df, by, ordered_vector, na.rm = FALSE, dup.rm = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"slice a tibble by an ordered vector — ordered_slice","text":"df tibble slice column, value must duplicated value ordered_vector ordered vector na.rm remove NA unknown values ordered vector dup.rm remove duplication values ordered vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"slice a tibble by an ordered vector — ordered_slice","text":"sliced tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/ordered_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"slice a tibble by an ordered vector — ordered_slice","text":"","code":"ordered_slice(mini_diamond, id, c(\"id-3\", \"id-2\")) #> # A tibble: 2 × 7 #>   id    carat cut   clarity price     x     y #>   <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #> 1 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #> 2 id-2   1.51 Good  VS2     11746  7.27  7.18"},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":null,"dir":"Reference","previous_headings":"","what":"from percent number to float number — percent_to_float","title":"from percent number to float number — percent_to_float","text":"percent number float number","code":""},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from percent number to float number — percent_to_float","text":"","code":"percent_to_float(x, digits = 2, to_double = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from percent number to float number — percent_to_float","text":"x percent number character digits hold n digits decimal point to_double use double output","code":""},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from percent number to float number — percent_to_float","text":"float character double x","code":""},{"path":"https://william-swl.github.io/baizer/reference/percent_to_float.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from percent number to float number — percent_to_float","text":"","code":"percent_to_float(\"12%\") #> [1] \"0.12\""},{"path":"https://william-swl.github.io/baizer/reference/pileup_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"pileup another logical vector on the TRUE values of first vector — pileup_logical","title":"pileup another logical vector on the TRUE values of first vector — pileup_logical","text":"pileup another logical vector TRUE values first vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/pileup_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pileup another logical vector on the TRUE values of first vector — pileup_logical","text":"","code":"pileup_logical(x, v)"},{"path":"https://william-swl.github.io/baizer/reference/pileup_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pileup another logical vector on the TRUE values of first vector — pileup_logical","text":"x logical vector v another logical vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/pileup_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pileup another logical vector on the TRUE values of first vector — pileup_logical","text":"logical vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/pileup_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pileup another logical vector on the TRUE values of first vector — pileup_logical","text":"","code":"# first vector have 2 TRUE value v1 <- c(TRUE, FALSE, TRUE)  # the length of second vector should also be 2 v2 <- c(FALSE, TRUE)  pileup_logical(v1, v2) #> [1] FALSE FALSE  TRUE"},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://william-swl.github.io/baizer/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkginfo.html","id":null,"dir":"Reference","previous_headings":"","what":"information of packages — pkginfo","title":"information of packages — pkginfo","text":"information packages","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkginfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"information of packages — pkginfo","text":"","code":"pkginfo(...)"},{"path":"https://william-swl.github.io/baizer/reference/pkginfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"information of packages — pkginfo","text":"... case-insensitive package names","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkginfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"information of packages — pkginfo","text":"","code":"baizer::pkginfo(dplyr) #> $dplyr #> Type: Package #> Package: dplyr #> Title: A Grammar of Data Manipulation #> Version: 1.1.2 #> Authors@R: c( person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = #>         c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0003-4757-117X\")), #>         person(\"Romain\", \"François\", role = \"aut\", comment = c(ORCID = #>         \"0000-0002-2444-4226\")), person(\"Lionel\", \"Henry\", role = #>         \"aut\"), person(\"Kirill\", \"Müller\", role = \"aut\", comment = #>         c(ORCID = \"0000-0002-1416-3412\")), person(\"Davis\", \"Vaughan\", , #>         \"davis@posit.co\", role = \"aut\", comment = c(ORCID = #>         \"0000-0003-4777-038X\")), person(\"Posit Software, PBC\", role = #>         c(\"cph\", \"fnd\")) ) #> Description: A fast, consistent tool for working with data frame like #>         objects, both in memory and out of memory. #> License: MIT + file LICENSE #> URL: https://dplyr.tidyverse.org, https://github.com/tidyverse/dplyr #> BugReports: https://github.com/tidyverse/dplyr/issues #> Depends: R (>= 3.5.0) #> Imports: cli (>= 3.4.0), generics, glue (>= 1.3.2), lifecycle (>= #>         1.0.3), magrittr (>= 1.5), methods, pillar (>= 1.9.0), R6, #>         rlang (>= 1.1.0), tibble (>= 3.2.0), tidyselect (>= 1.2.0), #>         utils, vctrs (>= 0.6.0) #> Suggests: bench, broom, callr, covr, DBI, dbplyr (>= 2.2.1), ggplot2, #>         knitr, Lahman, lobstr, microbenchmark, nycflights13, purrr, #>         rmarkdown, RMySQL, RPostgreSQL, RSQLite, stringi (>= 1.7.6), #>         testthat (>= 3.1.5), tidyr (>= 1.3.0), withr #> VignetteBuilder: knitr #> Config/Needs/website: tidyverse, shiny, pkgdown, tidyverse/tidytemplate #> Config/testthat/edition: 3 #> Encoding: UTF-8 #> LazyData: true #> RoxygenNote: 7.2.3 #> NeedsCompilation: yes #> Packaged: 2023-04-19 19:29:34 UTC; hadleywickham #> Author: Hadley Wickham [aut, cre] #>         (<https://orcid.org/0000-0003-4757-117X>), Romain François #>         [aut] (<https://orcid.org/0000-0002-2444-4226>), Lionel Henry #>         [aut], Kirill Müller [aut] #>         (<https://orcid.org/0000-0002-1416-3412>), Davis Vaughan [aut] #>         (<https://orcid.org/0000-0003-4777-038X>), Posit Software, PBC #>         [cph, fnd] #> Maintainer: Hadley Wickham <hadley@posit.co> #> Repository: RSPM #> Date/Publication: 2023-04-20 14:00:03 UTC #> Built: R 4.3.0; x86_64-pc-linux-gnu; 2023-04-21 21:51:47 UTC; unix #> RemoteType: standard #> RemotePkgRef: dplyr #> RemoteRef: dplyr #> RemoteRepos: #>         https://packagemanager.posit.co/cran/__linux__/jammy/latest #> RemotePkgPlatform: x86_64-pc-linux-gnu-ubuntu-22.04 #> RemoteSha: 1.1.2 #>  #> -- File: /home/runner/work/_temp/Library/dplyr/Meta/package.rds  #>"},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":null,"dir":"Reference","previous_headings":"","what":"load packages as a batch — pkglib","title":"load packages as a batch — pkglib","text":"load packages batch","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load packages as a batch — pkglib","text":"","code":"pkglib(...)"},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load packages as a batch — pkglib","text":"... pkgs","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkglib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load packages as a batch — pkglib","text":"","code":"baizer::pkglib(dplyr, purrr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union"},{"path":"https://william-swl.github.io/baizer/reference/pkgver.html","id":null,"dir":"Reference","previous_headings":"","what":"versions of packages — pkgver","title":"versions of packages — pkgver","text":"versions packages","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkgver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"versions of packages — pkgver","text":"","code":"pkgver(...)"},{"path":"https://william-swl.github.io/baizer/reference/pkgver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"versions of packages — pkgver","text":"... case-insensitive package names","code":""},{"path":"https://william-swl.github.io/baizer/reference/pkgver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"versions of packages — pkgver","text":"","code":"baizer::pkgver(dplyr, purrr) #> $dplyr #> [1] \"1.1.2\" #>  #> $purrr #> [1] \"1.0.1\" #>"},{"path":"https://william-swl.github.io/baizer/reference/pos_int_split.html","id":null,"dir":"Reference","previous_headings":"","what":"split a positive integer number as a number vector — pos_int_split","title":"split a positive integer number as a number vector — pos_int_split","text":"split positive integer number number vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/pos_int_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split a positive integer number as a number vector — pos_int_split","text":"","code":"pos_int_split(x, n, method = \"average\")"},{"path":"https://william-swl.github.io/baizer/reference/pos_int_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split a positive integer number as a number vector — pos_int_split","text":"x positive integer n length output method one average, random, number vector length n","code":""},{"path":"https://william-swl.github.io/baizer/reference/pos_int_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split a positive integer number as a number vector — pos_int_split","text":"number vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/pos_int_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split a positive integer number as a number vector — pos_int_split","text":"","code":"pos_int_split(12, 3, method = \"average\") #> [1] 4 4 4  pos_int_split(12, 3, method = \"random\") #> [1]  1 10  1  pos_int_split(12, 3, method = c(1, 2, 3)) #> [1] 2 4 6"},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper of tibble::rownames_to_column — r2c","title":"wrapper of tibble::rownames_to_column — r2c","text":"wrapper tibble::rownames_to_column","code":""},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper of tibble::rownames_to_column — r2c","text":"","code":"r2c(df, col = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper of tibble::rownames_to_column — r2c","text":"df tibble col col name","code":""},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper of tibble::rownames_to_column — r2c","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/r2c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper of tibble::rownames_to_column — r2c","text":"","code":"mini_diamond %>%   c2r(\"id\") %>%   r2c(\"id\") #> # A tibble: 100 × 7 #>    id    carat cut   clarity price     x     y #>    <chr> <dbl> <chr> <chr>   <int> <dbl> <dbl> #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/ref_level.html","id":null,"dir":"Reference","previous_headings":"","what":"relevel a target column by another reference column — ref_level","title":"relevel a target column by another reference column — ref_level","text":"relevel target column another reference column","code":""},{"path":"https://william-swl.github.io/baizer/reference/ref_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"relevel a target column by another reference column — ref_level","text":"","code":"ref_level(x, col, ref)"},{"path":"https://william-swl.github.io/baizer/reference/ref_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"relevel a target column by another reference column — ref_level","text":"x tibble col target column ref reference column","code":""},{"path":"https://william-swl.github.io/baizer/reference/ref_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"relevel a target column by another reference column — ref_level","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/ref_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"relevel a target column by another reference column — ref_level","text":"","code":"cut_level <- mini_diamond %>%   dplyr::pull(cut) %>%   unique()  mini_diamond %>%   dplyr::mutate(cut = factor(cut, cut_level)) %>%   dplyr::mutate(cut0 = stringr::str_c(cut, \"xxx\")) %>%   ref_level(cut0, cut) #> # A tibble: 100 × 8 #>    id    carat cut   clarity price     x     y cut0     #>    <chr> <dbl> <fct> <chr>   <int> <dbl> <dbl> <fct>    #>  1 id-1   1.02 Fair  SI1      3027  6.25  6.18 Fairxxx  #>  2 id-2   1.51 Good  VS2     11746  7.27  7.18 Goodxxx  #>  3 id-3   0.52 Ideal VVS1     2029  5.15  5.18 Idealxxx #>  4 id-4   1.54 Ideal SI2      9452  7.43  7.45 Idealxxx #>  5 id-5   0.72 Ideal VS1      2498  5.73  5.77 Idealxxx #>  6 id-6   2.02 Fair  SI2     14080  8.33  8.37 Fairxxx  #>  7 id-7   0.27 Good  VVS1      752  4.1   4.07 Goodxxx  #>  8 id-8   0.51 Good  SI2      1029  5.05  5.08 Goodxxx  #>  9 id-9   1.01 Ideal SI1      5590  6.43  6.4  Idealxxx #> 10 id-10  0.7  Fair  VVS1     1691  5.56  5.41 Fairxxx  #> # ℹ 90 more rows"},{"path":"https://william-swl.github.io/baizer/reference/reg_join.html","id":null,"dir":"Reference","previous_headings":"","what":"join the matched parts into string — reg_join","title":"join the matched parts into string — reg_join","text":"join matched parts string","code":""},{"path":"https://william-swl.github.io/baizer/reference/reg_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"join the matched parts into string — reg_join","text":"","code":"reg_join(x, pattern, sep = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/reg_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"join the matched parts into string — reg_join","text":"x character pattern regex pattern sep separator","code":""},{"path":"https://william-swl.github.io/baizer/reference/reg_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"join the matched parts into string — reg_join","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/reg_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"join the matched parts into string — reg_join","text":"","code":"reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"[A-Za-z]+\") #> [1] \"AB\" \"C\"   reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"\\\\w+\") #> [1] \"A_12B\"  \"C_3232\"  reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"\\\\d+\", sep = \",\") #> [1] \"12\"     \"3,23,2\"  reg_join(c(\"A_12.B\", \"C_3.23:2\"), \"\\\\d\", sep = \",\") #> [1] \"1,2\"     \"3,2,3,2\""},{"path":"https://william-swl.github.io/baizer/reference/reg_match.html","id":null,"dir":"Reference","previous_headings":"","what":"regex match — reg_match","title":"regex match — reg_match","text":"regex match","code":""},{"path":"https://william-swl.github.io/baizer/reference/reg_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"regex match — reg_match","text":"","code":"reg_match(x, pattern, group = 1)"},{"path":"https://william-swl.github.io/baizer/reference/reg_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"regex match — reg_match","text":"x vector pattern regex pattern group regex group, 1 default. group=-1, return full matched tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/reg_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"regex match — reg_match","text":"vector tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/reg_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"regex match — reg_match","text":"","code":"v <- stringr::str_c(\"id\", 1:3, c(\"A\", \"B\", \"C\"))  reg_match(v, \"id(\\\\d+)(\\\\w)\") #> [1] \"1\" \"2\" \"3\"  reg_match(v, \"id(\\\\d+)(\\\\w)\", group = 2) #> [1] \"A\" \"B\" \"C\"  reg_match(v, \"id(\\\\d+)(\\\\w)\", group = -1) #> # A tibble: 3 × 3 #>   match group1 group2 #>   <chr> <chr>  <chr>  #> 1 id1A  1      A      #> 2 id2B  2      B      #> 3 id3C  3      C"},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":null,"dir":"Reference","previous_headings":"","what":"remove columns by the ratio of NA — remove_nacol","title":"remove columns by the ratio of NA — remove_nacol","text":"remove columns ratio NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove columns by the ratio of NA — remove_nacol","text":"","code":"remove_nacol(df, max_ratio = 1)"},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove columns by the ratio of NA — remove_nacol","text":"df tibble max_ratio max NA ratio, default 1 remove columns NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove columns by the ratio of NA — remove_nacol","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_nacol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove columns by the ratio of NA — remove_nacol","text":"","code":"# remove_nacol(df)"},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":null,"dir":"Reference","previous_headings":"","what":"remove rows by the ratio of NA — remove_narow","title":"remove rows by the ratio of NA — remove_narow","text":"remove rows ratio NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove rows by the ratio of NA — remove_narow","text":"","code":"remove_narow(df, ..., max_ratio = 1)"},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove rows by the ratio of NA — remove_narow","text":"df tibble ... remove rows according columns, refer dplyr::select() max_ratio max NA ratio, default 1 remove rows NA","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove rows by the ratio of NA — remove_narow","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/remove_narow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove rows by the ratio of NA — remove_narow","text":"","code":"# remove_narow(df)"},{"path":"https://william-swl.github.io/baizer/reference/replace_item.html","id":null,"dir":"Reference","previous_headings":"","what":"replace the items of one object by another — replace_item","title":"replace the items of one object by another — replace_item","text":"replace items one object another","code":""},{"path":"https://william-swl.github.io/baizer/reference/replace_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"replace the items of one object by another — replace_item","text":"","code":"replace_item(x, y, keep_extra = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/replace_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"replace the items of one object by another — replace_item","text":"x number, character list y another object, class y x keep_extra whether keep extra items y","code":""},{"path":"https://william-swl.github.io/baizer/reference/replace_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"replace the items of one object by another — replace_item","text":"replaced object","code":""},{"path":"https://william-swl.github.io/baizer/reference/replace_item.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"replace the items of one object by another — replace_item","text":"","code":"x <- list(A = 1, B = 3) y <- list(A = 9, C = 10)  replace_item(x, y) #> $A #> [1] 9 #>  #> $B #> [1] 3 #>   replace_item(x, y, keep_extra = TRUE) #> $A #> [1] 9 #>  #> $B #> [1] 3 #>  #> $C #> [1] 10 #>"},{"path":"https://william-swl.github.io/baizer/reference/rng2seq.html","id":null,"dir":"Reference","previous_headings":"","what":"trans range character into seq characters — rng2seq","title":"trans range character into seq characters — rng2seq","text":"trans range character seq characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/rng2seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"trans range character into seq characters — rng2seq","text":"","code":"rng2seq(x, sep = \"-\")"},{"path":"https://william-swl.github.io/baizer/reference/rng2seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"trans range character into seq characters — rng2seq","text":"x range character sep range separator","code":""},{"path":"https://william-swl.github.io/baizer/reference/rng2seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"trans range character into seq characters — rng2seq","text":"seq characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/rng2seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"trans range character into seq characters — rng2seq","text":"","code":"rng2seq(c(\"1-5\", \"2\")) #> [[1]] #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" #>  #> [[2]] #> [1] \"2\" #>"},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":null,"dir":"Reference","previous_headings":"","what":"from float number to fixed digits character — round_string","title":"from float number to fixed digits character — round_string","text":"float number fixed digits character","code":""},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from float number to fixed digits character — round_string","text":"","code":"round_string(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from float number to fixed digits character — round_string","text":"x number digits hold n digits decimal point","code":""},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from float number to fixed digits character — round_string","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/round_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from float number to fixed digits character — round_string","text":"","code":"round_string(1.1, 2) #> [1] \"1.10\""},{"path":"https://william-swl.github.io/baizer/reference/roxygen_fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"add #' into each line of codes for roxygen examples — roxygen_fmt","title":"add #' into each line of codes for roxygen examples — roxygen_fmt","text":"add #' line codes roxygen examples","code":""},{"path":"https://william-swl.github.io/baizer/reference/roxygen_fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add #' into each line of codes for roxygen examples — roxygen_fmt","text":"","code":"roxygen_fmt(x)"},{"path":"https://william-swl.github.io/baizer/reference/roxygen_fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add #' into each line of codes for roxygen examples — roxygen_fmt","text":"x codes","code":""},{"path":"https://william-swl.github.io/baizer/reference/roxygen_fmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add #' into each line of codes for roxygen examples — roxygen_fmt","text":"","code":"roxygen_fmt(   \" code line1 code line2 \" ) #>  #> #' code line1 #> #' code line2 #> #'"},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":null,"dir":"Reference","previous_headings":"","what":"the index of identical character — same_index","title":"the index of identical character — same_index","text":"index identical character","code":""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the index of identical character — same_index","text":"","code":"same_index(s1, s2, nth = NULL, ignore_case = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the index of identical character — same_index","text":"s1 string1 s2 string2 nth just return nth index ignore_case ignore upper lower cases","code":""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the index of identical character — same_index","text":"list identical character indices","code":""},{"path":"https://william-swl.github.io/baizer/reference/same_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the index of identical character — same_index","text":"","code":"same_index(\"AAAA\", \"ABBA\") #> [[1]] #> [1] 1 4 #>"},{"path":"https://william-swl.github.io/baizer/reference/seriate_df.html","id":null,"dir":"Reference","previous_headings":"","what":"dataframe rows seriation, which will reorder the rows in a better pattern — seriate_df","title":"dataframe rows seriation, which will reorder the rows in a better pattern — seriate_df","text":"dataframe rows seriation, reorder rows better pattern","code":""},{"path":"https://william-swl.github.io/baizer/reference/seriate_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dataframe rows seriation, which will reorder the rows in a better pattern — seriate_df","text":"","code":"seriate_df(x)"},{"path":"https://william-swl.github.io/baizer/reference/seriate_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dataframe rows seriation, which will reorder the rows in a better pattern — seriate_df","text":"x dataframe","code":""},{"path":"https://william-swl.github.io/baizer/reference/seriate_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dataframe rows seriation, which will reorder the rows in a better pattern — seriate_df","text":"seriated dataframe","code":""},{"path":"https://william-swl.github.io/baizer/reference/seriate_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dataframe rows seriation, which will reorder the rows in a better pattern — seriate_df","text":"","code":"x <- mini_diamond %>%   dplyr::select(id, dplyr::where(is.numeric)) %>%   dplyr::mutate(     dplyr::across(       dplyr::where(is.numeric),       ~ round(.x / max(.x), 4)     )   ) %>%   c2r(\"id\")  seriate_df(x) #>         carat  price      x      y #> id-7   0.1034 0.0417 0.4734 0.4749 #> id-15  0.1073 0.0340 0.4723 0.4807 #> id-94  0.1073 0.0256 0.4838 0.4936 #> id-60  0.1111 0.0337 0.4931 0.5006 #> id-61  0.1149 0.0350 0.4885 0.5018 #> id-42  0.1226 0.0327 0.5000 0.5076 #> id-88  0.1188 0.0348 0.5058 0.5064 #> id-87  0.1303 0.0331 0.5081 0.5181 #> id-26  0.1188 0.0398 0.5035 0.5146 #> id-86  0.1188 0.0494 0.5058 0.5134 #> id-14  0.1149 0.0450 0.5000 0.5123 #> id-39  0.1149 0.0479 0.5000 0.5088 #> id-57  0.1149 0.0479 0.4988 0.5064 #> id-89  0.1149 0.0670 0.5162 0.5076 #> id-96  0.1226 0.0474 0.5139 0.5204 #> id-53  0.1264 0.0584 0.5277 0.5309 #> id-69  0.1533 0.0272 0.5358 0.5461 #> id-16  0.1571 0.0259 0.5427 0.5531 #> id-54  0.1533 0.0516 0.5450 0.5543 #> id-81  0.1571 0.0529 0.5508 0.5589 #> id-72  0.1609 0.0578 0.5450 0.5578 #> id-21  0.1533 0.0599 0.5439 0.5519 #> id-73  0.1533 0.0682 0.5462 0.5554 #> id-56  0.1533 0.0621 0.5485 0.5601 #> id-18  0.1303 0.0561 0.5543 0.5554 #> id-46  0.1303 0.0577 0.5450 0.5566 #> id-95  0.1418 0.0799 0.5404 0.5519 #> id-74  0.1724 0.0859 0.5600 0.5578 #> id-37  0.1954 0.1560 0.5947 0.5963 #> id-45  0.1801 0.1227 0.5878 0.5811 #> id-3   0.1992 0.1126 0.5947 0.6044 #> id-62  0.1762 0.1002 0.5912 0.6044 #> id-84  0.1916 0.0785 0.5901 0.5893 #> id-8   0.1954 0.0571 0.5831 0.5928 #> id-30  0.1992 0.0777 0.6074 0.6068 #> id-13  0.2146 0.0906 0.6132 0.6208 #> id-67  0.2222 0.0800 0.6236 0.6254 #> id-19  0.2261 0.1195 0.6166 0.6289 #> id-65  0.2414 0.1083 0.6189 0.6313 #> id-76  0.2452 0.0961 0.6524 0.6289 #> id-10  0.2682 0.0938 0.6420 0.6313 #> id-23  0.2682 0.0642 0.6513 0.6418 #> id-75  0.2720 0.1229 0.6490 0.6523 #> id-52  0.2759 0.1279 0.6536 0.6663 #> id-29  0.2759 0.1276 0.6605 0.6744 #> id-5   0.2759 0.1386 0.6617 0.6733 #> id-77  0.2720 0.1455 0.6732 0.6779 #> id-55  0.2720 0.1699 0.6547 0.6499 #> id-44  0.2682 0.1713 0.6339 0.6488 #> id-78  0.2682 0.1961 0.6570 0.6674 #> id-83  0.2797 0.1934 0.6663 0.6791 #> id-12  0.2720 0.1778 0.6778 0.6779 #> id-80  0.3065 0.2258 0.6824 0.6954 #> id-24  0.3525 0.2356 0.7055 0.7200 #> id-70  0.3448 0.2373 0.7229 0.7340 #> id-59  0.3487 0.2283 0.7367 0.7468 #> id-41  0.3755 0.2149 0.7333 0.7456 #> id-50  0.3831 0.2691 0.7240 0.7363 #> id-64  0.3870 0.2485 0.7321 0.7340 #> id-98  0.3831 0.2392 0.7240 0.7270 #> id-1   0.3908 0.1679 0.7217 0.7211 #> id-58  0.3448 0.1824 0.7044 0.7141 #> id-22  0.3448 0.1801 0.7113 0.7083 #> id-66  0.3448 0.1562 0.7021 0.7048 #> id-82  0.3448 0.1189 0.7032 0.7060 #> id-71  0.3716 0.1315 0.7321 0.7328 #> id-17  0.3716 0.1242 0.7390 0.7503 #> id-34  0.4368 0.1291 0.7656 0.7643 #> id-20  0.4598 0.1670 0.7633 0.7631 #> id-90  0.4330 0.2040 0.7679 0.7806 #> id-9   0.3870 0.3101 0.7425 0.7468 #> id-36  0.3831 0.3392 0.7229 0.7246 #> id-35  0.3831 0.3625 0.7356 0.7480 #> id-51  0.3831 0.3743 0.7298 0.7351 #> id-11  0.3908 0.4361 0.7356 0.7468 #> id-31  0.3946 0.4659 0.7552 0.7585 #> id-85  0.3831 0.3929 0.7818 0.7830 #> id-100 0.4598 0.3519 0.7760 0.7795 #> id-33  0.4636 0.2914 0.7656 0.7830 #> id-43  0.4291 0.3044 0.7483 0.7608 #> id-93  0.4176 0.2982 0.7621 0.7748 #> id-38  0.4176 0.3007 0.7644 0.7783 #> id-47  0.4215 0.2979 0.7691 0.7818 #> id-79  0.4138 0.2869 0.7968 0.7935 #> id-27  0.4330 0.2773 0.8002 0.8028 #> id-63  0.5172 0.3120 0.8060 0.8086 #> id-40  0.5824 0.4099 0.8349 0.8390 #> id-4   0.5900 0.5244 0.8580 0.8693 #> id-91  0.6628 0.4643 0.8776 0.8821 #> id-32  0.7663 0.3144 0.8984 0.9032 #> id-28  0.7739 0.3520 0.9088 0.9102 #> id-48  0.7701 0.4046 0.9584 0.9557 #> id-49  0.8276 0.4831 0.9596 0.9638 #> id-97  1.0000 0.7647 1.0000 1.0000 #> id-68  0.8889 1.0000 0.9781 0.9697 #> id-6   0.7739 0.7811 0.9619 0.9767 #> id-25  0.8046 0.8780 0.9203 0.9242 #> id-99  0.7663 0.8516 0.8811 0.8856 #> id-92  0.5785 0.8129 0.8291 0.8448 #> id-2   0.5785 0.6516 0.8395 0.8378"},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"connection parameters to remote server via sftp — sftp_connect","title":"connection parameters to remote server via sftp — sftp_connect","text":"connection parameters remote server via sftp","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connection parameters to remote server via sftp — sftp_connect","text":"","code":"sftp_connect(   server = \"localhost\",   port = 22,   user = NULL,   password = NULL,   wd = \"~\" )"},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connection parameters to remote server via sftp — sftp_connect","text":"server remote server port SSH port, 22 default user username password password wd workdir","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"connection parameters to remote server via sftp — sftp_connect","text":"sftp_connection object","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"connection parameters to remote server via sftp — sftp_connect","text":"","code":"# sftp_con <- sftp_connect(server='remote_host', port=22, #     user='username', password = \"password\", wd='~')"},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":null,"dir":"Reference","previous_headings":"","what":"download file from remote server via sftp — sftp_download","title":"download file from remote server via sftp — sftp_download","text":"download file remote server via sftp","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download file from remote server via sftp — sftp_download","text":"","code":"sftp_download(sftp_con, path = NULL, to = basename(path))"},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download file from remote server via sftp — sftp_download","text":"sftp_con sftp_connection created sftp_connect() path remote file path local target path","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"download file from remote server via sftp — sftp_download","text":"","code":"# sftp_download(sftp_con, #   path=c('t1.txt', 't2.txt'), #   to=c('path1.txt', 'path2.txt')"},{"path":"https://william-swl.github.io/baizer/reference/sftp_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"list files from remote server via sftp — sftp_ls","title":"list files from remote server via sftp — sftp_ls","text":"list files remote server via sftp","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list files from remote server via sftp — sftp_ls","text":"","code":"sftp_ls(sftp_con, path = NULL, all = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/sftp_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list files from remote server via sftp — sftp_ls","text":"sftp_con sftp_connection created sftp_connect() path remote directory path list hidden files ","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list files from remote server via sftp — sftp_ls","text":"files dir","code":""},{"path":"https://william-swl.github.io/baizer/reference/sftp_ls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list files from remote server via sftp — sftp_ls","text":"","code":"# sftp_ls(sftp_con, 'your/dir')"},{"path":"https://william-swl.github.io/baizer/reference/signif_ceiling.html","id":null,"dir":"Reference","previous_headings":"","what":"signif while use ceiling — signif_ceiling","title":"signif while use ceiling — signif_ceiling","text":"signif use ceiling","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_ceiling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"signif while use ceiling — signif_ceiling","text":"","code":"signif_ceiling(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/signif_ceiling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"signif while use ceiling — signif_ceiling","text":"x number digits digits","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_ceiling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"signif while use ceiling — signif_ceiling","text":"number","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_ceiling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"signif while use ceiling — signif_ceiling","text":"","code":"signif_ceiling(3.11, 2) #> [1] 3.2"},{"path":"https://william-swl.github.io/baizer/reference/signif_floor.html","id":null,"dir":"Reference","previous_headings":"","what":"signif while use floor — signif_floor","title":"signif while use floor — signif_floor","text":"signif use floor","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_floor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"signif while use floor — signif_floor","text":"","code":"signif_floor(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/signif_floor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"signif while use floor — signif_floor","text":"x number digits digits","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_floor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"signif while use floor — signif_floor","text":"number","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_floor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"signif while use floor — signif_floor","text":"","code":"signif_floor(3.19, 2) #> [1] 3.1"},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":null,"dir":"Reference","previous_headings":"","what":"signif or round string depend on the character length — signif_round_string","title":"signif or round string depend on the character length — signif_round_string","text":"signif round string depend character length","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"signif or round string depend on the character length — signif_round_string","text":"","code":"signif_round_string(   x,   digits = 2,   format = \"short\",   full_large = TRUE,   full_small = FALSE )"},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"signif or round string depend on the character length — signif_round_string","text":"x number digits signif round digits format short long full_large keep full digits large number full_small keep full digits small number","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"signif or round string depend on the character length — signif_round_string","text":"signif round strings","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_round_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"signif or round string depend on the character length — signif_round_string","text":"","code":"signif_round_string(1.214, 2) #> [1] \"1.2\""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":null,"dir":"Reference","previous_headings":"","what":"from float number to fixed significant digits character — signif_string","title":"from float number to fixed significant digits character — signif_string","text":"float number fixed significant digits character","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from float number to fixed significant digits character — signif_string","text":"","code":"signif_string(x, digits = 2)"},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from float number to fixed significant digits character — signif_string","text":"x number digits hold n significant digits","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"from float number to fixed significant digits character — signif_string","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/signif_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"from float number to fixed significant digits character — signif_string","text":"","code":"signif_string(1.1, 2) #> [1] \"1.1\""},{"path":"https://william-swl.github.io/baizer/reference/slice_char.html","id":null,"dir":"Reference","previous_headings":"","what":"slice character vector — slice_char","title":"slice character vector — slice_char","text":"slice character vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/slice_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slice character vector — slice_char","text":"","code":"slice_char(x, from = x[1], to = x[length(x)], unique = FALSE)"},{"path":"https://william-swl.github.io/baizer/reference/slice_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"slice character vector — slice_char","text":"x character vector unique remove duplicated boundary characters","code":""},{"path":"https://william-swl.github.io/baizer/reference/slice_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"slice character vector — slice_char","text":"sliced vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/slice_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"slice character vector — slice_char","text":"","code":"x <- c(\"A\", \"B\", \"C\", \"D\", \"E\") slice_char(x, \"A\", \"D\") #> [1] \"A\" \"B\" \"C\" \"D\" slice_char(x, \"D\", \"A\") #> [1] \"D\" \"C\" \"B\" \"A\"  x <- c(\"A\", \"B\", \"C\", \"C\", \"A\", \"D\", \"D\", \"E\", \"A\") slice_char(x, \"B\", \"E\") #> [1] \"B\" \"C\" \"C\" \"A\" \"D\" \"D\" \"E\" # duplicated element as boundary will throw an error # slice_char(x, 'A', 'E') # unique=TRUE to remove the duplicated boundary characters slice_char(x, \"A\", \"E\", unique = TRUE) #> [1] \"A\" \"B\" \"C\" \"C\" \"D\" \"D\" \"E\""},{"path":"https://william-swl.github.io/baizer/reference/sortf.html","id":null,"dir":"Reference","previous_headings":"","what":"sort by a function — sortf","title":"sort by a function — sortf","text":"sort function","code":""},{"path":"https://william-swl.github.io/baizer/reference/sortf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort by a function — sortf","text":"","code":"sortf(x, func, group_pattern = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/sortf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort by a function — sortf","text":"x vector func function used sort group_pattern regex pattern group , available x character vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/sortf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sort by a function — sortf","text":"vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/sortf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sort by a function — sortf","text":"","code":"sortf(c(-2, 1, 3), abs) #> [1]  1 -2  3  v <- stringr::str_c(\"id\", c(1, 2, 9, 10, 11, 12, 99, 101, 102)) %>% sample()  sortf(v, function(x) reg_match(x, \"\\\\d+\") %>% as.double()) #> [1] \"id1\"   \"id2\"   \"id9\"   \"id10\"  \"id11\"  \"id12\"  \"id99\"  \"id101\" \"id102\"  sortf(v, ~ reg_match(.x, \"\\\\d+\") %>% as.double()) #> [1] \"id1\"   \"id2\"   \"id9\"   \"id10\"  \"id11\"  \"id12\"  \"id99\"  \"id101\" \"id102\"  v <- c(   stringr::str_c(\"A\", c(1, 2, 9, 10, 11, 12, 99, 101, 102)),   stringr::str_c(\"B\", c(1, 2, 9, 10, 21, 32, 99, 101, 102)) ) %>% sample()  sortf(v, ~ reg_match(.x, \"\\\\d+\") %>% as.double(), group_pattern = \"\\\\w\") #>  [1] \"A1\"   \"A2\"   \"A9\"   \"A10\"  \"A11\"  \"A12\"  \"A99\"  \"A101\" \"A102\" \"B1\"   #> [11] \"B2\"   \"B9\"   \"B10\"  \"B21\"  \"B32\"  \"B99\"  \"B101\" \"B102\""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":null,"dir":"Reference","previous_headings":"","what":"split a column and return a longer tibble — split_column","title":"split a column and return a longer tibble — split_column","text":"split column return longer tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split a column and return a longer tibble — split_column","text":"","code":"split_column(df, name_col, value_col, sep = \",\")"},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split a column and return a longer tibble — split_column","text":"df tibble name_col repeat name column value_col expand value column sep separator string","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split a column and return a longer tibble — split_column","text":"expanded tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split a column and return a longer tibble — split_column","text":"","code":"fancy_count(mini_diamond, cut, ext = clarity) %>%   split_column(name_col = cut, value_col = clarity) #> # A tibble: 24 × 2 #>    cut   clarity #>    <chr> <chr>   #>  1 Fair  I1(5)   #>  2 Fair  IF(4)   #>  3 Fair  SI1(5)  #>  4 Fair  SI2(4)  #>  5 Fair  VS1(3)  #>  6 Fair  VS2(5)  #>  7 Fair  VVS1(5) #>  8 Fair  VVS2(4) #>  9 Good  I1(5)   #> 10 Good  IF(5)   #> # ℹ 14 more rows"},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":null,"dir":"Reference","previous_headings":"","what":"split a path into ancestor paths recursively — split_path","title":"split a path into ancestor paths recursively — split_path","text":"split path ancestor paths recursively","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split a path into ancestor paths recursively — split_path","text":"","code":"split_path(path)"},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split a path into ancestor paths recursively — split_path","text":"path path split","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split a path into ancestor paths recursively — split_path","text":"character vectors ancestor paths","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split a path into ancestor paths recursively — split_path","text":"","code":"split_path(\"/home/someone/a/test/path.txt\") #> [[1]] #> [1] \"/home\"                         \"/home/someone\"                 #> [3] \"/home/someone/a\"               \"/home/someone/a/test\"          #> [5] \"/home/someone/a/test/path.txt\" #>"},{"path":"https://william-swl.github.io/baizer/reference/split_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"split vector into list — split_vector","title":"split vector into list — split_vector","text":"split vector list","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split vector into list — split_vector","text":"","code":"split_vector(vector, breaks, bounds = \"(]\")"},{"path":"https://william-swl.github.io/baizer/reference/split_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split vector into list — split_vector","text":"vector vector breaks split breaks bounds \"(]\" default, can also \"[), []\"","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split vector into list — split_vector","text":"list","code":""},{"path":"https://william-swl.github.io/baizer/reference/split_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split vector into list — split_vector","text":"","code":"split_vector(1:10, c(3, 7)) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 7 #>  #> [[3]] #> [1]  8  9 10 #>  split_vector(stringr::str_split(\"ABCDEFGHIJ\", \"\") %>% unlist(),   c(3, 7),   bounds = \"[)\" ) #> [[1]] #> [1] \"A\" \"B\" #>  #> [[2]] #> [1] \"C\" \"D\" \"E\" \"F\" #>  #> [[3]] #> [1] \"G\" \"H\" \"I\" \"J\" #>"},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"fold change calculation which returns a extensible tibble — stat_fc","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"fold change calculation returns extensible tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"","code":"stat_fc(   df,   y,   x,   method = \"mean\",   .by = NULL,   rev_div = FALSE,   digits = 2,   fc_fmt = \"short\" )"},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"df tibble y value x sample test group method 'mean'|'median'|'geom_mean', summary method .super-group rev_div reverse division digits fold change digits fc_fmt fold change format, one short, signif, round","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"fold change result tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_fc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fold change calculation which returns a extensible tibble — stat_fc","text":"","code":"stat_fc(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 24 × 8 #>    y     clarity group1 group2     y1    y2    fc fc_fmt #>    <chr> <chr>   <chr>  <chr>   <dbl> <dbl> <dbl> <chr>  #>  1 price I1      Fair   Good    4695. 2760. 1.70  1.7x   #>  2 price I1      Fair   Ideal   4695. 4249  1.11  1.1x   #>  3 price I1      Good   Ideal   2760. 4249  0.649 0.65x  #>  4 price IF      Fair   Good    2016  1044. 1.93  1.9x   #>  5 price IF      Fair   Ideal   2016   962. 2.10  2.1x   #>  6 price IF      Good   Ideal   1044.  962. 1.09  1.1x   #>  7 price SI1     Fair   Good    5844. 3227. 1.81  1.8x   #>  8 price SI1     Fair   Ideal   5844. 3877. 1.51  1.5x   #>  9 price SI1     Good   Ideal   3227. 3877. 0.832 0.83x  #> 10 price SI2     Fair   Good   13162. 6539. 2.01  2.0x   #> # ℹ 14 more rows"},{"path":"https://william-swl.github.io/baizer/reference/stat_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate phi coefficient of two binary variables — stat_phi","title":"calculate phi coefficient of two binary variables — stat_phi","text":"calculate phi coefficient two binary variables","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate phi coefficient of two binary variables — stat_phi","text":"","code":"stat_phi(x)"},{"path":"https://william-swl.github.io/baizer/reference/stat_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate phi coefficient of two binary variables — stat_phi","text":"x 2x2 matrix dataframe","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate phi coefficient of two binary variables — stat_phi","text":"phi coefficient","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate phi coefficient of two binary variables — stat_phi","text":"","code":"data <- matrix(c(10, 8, 14, 18), nrow = 2) stat_phi(data) #> [1] 0.1134241"},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":null,"dir":"Reference","previous_headings":"","what":"statistical test which returns a extensible tibble — stat_test","title":"statistical test which returns a extensible tibble — stat_test","text":"statistical test returns extensible tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"statistical test which returns a extensible tibble — stat_test","text":"","code":"stat_test(   df,   y,   x,   .by = NULL,   trans = \"identity\",   paired = FALSE,   alternative = \"two.sided\",   method = \"wilcoxon\",   ns_symbol = \"NS\" )"},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"statistical test which returns a extensible tibble — stat_test","text":"df tibble y value x sample test group .super-group trans scale transformation paired paired samples alternative one \"two.sided\" (default), \"greater\" \"less\" method test method, 'wilcoxon' default ns_symbol symbol nonsignificant, 'NS' default","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"statistical test which returns a extensible tibble — stat_test","text":"test result tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/stat_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"statistical test which returns a extensible tibble — stat_test","text":"","code":"stat_test(mini_diamond, y = price, x = cut, .by = clarity) #> # A tibble: 24 × 9 #>    y     clarity group1 group2    n1    n2      p  plim symbol #>    <chr> <chr>   <chr>  <chr>  <int> <int>  <dbl> <dbl> <chr>  #>  1 price I1      Fair   Good       5     5 0.310   1.01 NS     #>  2 price I1      Fair   Ideal      5     4 0.905   1.01 NS     #>  3 price I1      Good   Ideal      5     4 0.190   1.01 NS     #>  4 price IF      Fair   Good       4     5 0.0635  1.01 NS     #>  5 price IF      Fair   Ideal      4     4 0.0591  1.01 NS     #>  6 price IF      Good   Ideal      5     4 1       1.01 NS     #>  7 price SI1     Fair   Good       5     4 1       1.01 NS     #>  8 price SI1     Fair   Ideal      5     5 1       1.01 NS     #>  9 price SI1     Good   Ideal      4     5 0.413   1.01 NS     #> 10 price SI2     Fair   Good       4     4 0.0571  1.01 NS     #> # ℹ 14 more rows"},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":null,"dir":"Reference","previous_headings":"","what":"create a tbflt object to save filter conditions — tbflt","title":"create a tbflt object to save filter conditions — tbflt","text":"tbflt() can save series filter conditions, support logical operating among conditions","code":""},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a tbflt object to save filter conditions — tbflt","text":"","code":"tbflt(x = expression(), .env = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a tbflt object to save filter conditions — tbflt","text":"x expression .env environment","code":""},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a tbflt object to save filter conditions — tbflt","text":"tbflt","code":""},{"path":"https://william-swl.github.io/baizer/reference/tbflt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a tbflt object to save filter conditions — tbflt","text":"","code":"c1 <- tbflt(cut == \"Fair\")  c2 <- tbflt(x > 8)  !c1 #> <quosure> #> expr: ^!cut == \"Fair\" #> env:  0x5585dfab7338  c1 | c2 #> <quosure> #> expr: ^cut == \"Fair\" | x > 8 #> env:  0x5585ddb96a78  c1 & c2 #> <quosure> #> expr: ^cut == \"Fair\" & x > 8 #> env:  0x5585dec77b68"},{"path":"https://william-swl.github.io/baizer/reference/tdf.html","id":null,"dir":"Reference","previous_headings":"","what":"transpose a dataframe — tdf","title":"transpose a dataframe — tdf","text":"transpose dataframe","code":""},{"path":"https://william-swl.github.io/baizer/reference/tdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"transpose a dataframe — tdf","text":"","code":"tdf(x, colnames = NULL)"},{"path":"https://william-swl.github.io/baizer/reference/tdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"transpose a dataframe — tdf","text":"x dataframe colnames column names transposed dataframe","code":""},{"path":"https://william-swl.github.io/baizer/reference/tdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"transpose a dataframe — tdf","text":"dataframe","code":""},{"path":"https://william-swl.github.io/baizer/reference/tdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"transpose a dataframe — tdf","text":"","code":"x <- c2r(mini_diamond, \"id\") tdf(x) #> # A tibble: 6 × 101 #>   item    `id-1` `id-2` `id-3` `id-4` `id-5` `id-6` `id-7` `id-8` `id-9` `id-10` #>   <chr>   <chr>  <chr>  <chr>  <chr>  <chr>  <chr>  <chr>  <chr>  <chr>  <chr>   #> 1 carat   \"1.02\" 1.51   \"0.52\" \"1.54\" \"0.72\" 2.02   \"0.27\" \"0.51\" \"1.01\" \"0.70\"  #> 2 cut     \"Fair\" Good   \"Idea… \"Idea… \"Idea… Fair   \"Good\" \"Good\" \"Idea… \"Fair\"  #> 3 clarity \"SI1\"  VS2    \"VVS1\" \"SI2\"  \"VS1\"  SI2    \"VVS1\" \"SI2\"  \"SI1\"  \"VVS1\"  #> 4 price   \" 302… 11746  \" 202… \" 945… \" 249… 14080  \"  75… \" 102… \" 559… \" 1691\" #> 5 x       \"6.25\" 7.27   \"5.15\" \"7.43\" \"5.73\" 8.33   \"4.10\" \"5.05\" \"6.43\" \"5.56\"  #> 6 y       \"6.18\" 7.18   \"5.18\" \"7.45\" \"5.77\" 8.37   \"4.07\" \"5.08\" \"6.40\" \"5.41\"  #> # ℹ 90 more variables: `id-11` <chr>, `id-12` <chr>, `id-13` <chr>, #> #   `id-14` <chr>, `id-15` <chr>, `id-16` <chr>, `id-17` <chr>, `id-18` <chr>, #> #   `id-19` <chr>, `id-20` <chr>, `id-21` <chr>, `id-22` <chr>, `id-23` <chr>, #> #   `id-24` <chr>, `id-25` <chr>, `id-26` <chr>, `id-27` <chr>, `id-28` <chr>, #> #   `id-29` <chr>, `id-30` <chr>, `id-31` <chr>, `id-32` <chr>, `id-33` <chr>, #> #   `id-34` <chr>, `id-35` <chr>, `id-36` <chr>, `id-37` <chr>, `id-38` <chr>, #> #   `id-39` <chr>, `id-40` <chr>, `id-41` <chr>, `id-42` <chr>, …"},{"path":"https://william-swl.github.io/baizer/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://william-swl.github.io/baizer/reference/top_item.html","id":null,"dir":"Reference","previous_headings":"","what":"return top n items with highest frequency — top_item","title":"return top n items with highest frequency — top_item","text":"return top n items highest frequency","code":""},{"path":"https://william-swl.github.io/baizer/reference/top_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return top n items with highest frequency — top_item","text":"","code":"top_item(x, n = 1)"},{"path":"https://william-swl.github.io/baizer/reference/top_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return top n items with highest frequency — top_item","text":"x character n top n","code":""},{"path":"https://william-swl.github.io/baizer/reference/top_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return top n items with highest frequency — top_item","text":"character","code":""},{"path":"https://william-swl.github.io/baizer/reference/top_item.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return top n items with highest frequency — top_item","text":"","code":"top_item(c(\"a\", \"b\", \"c\", \"b\")) #> [1] \"b\""},{"path":"https://william-swl.github.io/baizer/reference/uniq.html","id":null,"dir":"Reference","previous_headings":"","what":"only keep unique vector values and its names — uniq","title":"only keep unique vector values and its names — uniq","text":"keep unique vector values names","code":""},{"path":"https://william-swl.github.io/baizer/reference/uniq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"only keep unique vector values and its names — uniq","text":"","code":"uniq(x)"},{"path":"https://william-swl.github.io/baizer/reference/uniq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"only keep unique vector values and its names — uniq","text":"x vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/uniq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"only keep unique vector values and its names — uniq","text":"vector","code":""},{"path":"https://william-swl.github.io/baizer/reference/uniq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"only keep unique vector values and its names — uniq","text":"","code":"x <- c(a = 1, b = 2, c = 3, b = 2, a = 1)  uniq(x) #> a b c  #> 1 2 3"},{"path":"https://william-swl.github.io/baizer/reference/uniq_in_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"count unique values in each column — uniq_in_cols","title":"count unique values in each column — uniq_in_cols","text":"count unique values column","code":""},{"path":"https://william-swl.github.io/baizer/reference/uniq_in_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count unique values in each column — uniq_in_cols","text":"","code":"uniq_in_cols(x)"},{"path":"https://william-swl.github.io/baizer/reference/uniq_in_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count unique values in each column — uniq_in_cols","text":"x tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/uniq_in_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"count unique values in each column — uniq_in_cols","text":"tibble","code":""},{"path":"https://william-swl.github.io/baizer/reference/uniq_in_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count unique values in each column — uniq_in_cols","text":"","code":"uniq_in_cols(mini_diamond) #> # A tibble: 7 × 2 #>   col     uniqe_values #>   <chr>   <chr>        #> 1 id      100          #> 2 carat   57           #> 3 cut     3            #> 4 clarity 8            #> 5 price   99           #> 6 x       89           #> 7 y       87"},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"write a tibble into an excel file — write_excel","title":"write a tibble into an excel file — write_excel","text":"write tibble excel file","code":""},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write a tibble into an excel file — write_excel","text":"","code":"write_excel(df, filename, sheetname = NULL, creator = \"\")"},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write a tibble into an excel file — write_excel","text":"df tibble list tibbles filename output filename sheetname names sheets. given, use 'sheet1', names list creator creator","code":""},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"write a tibble into an excel file — write_excel","text":"return status","code":""},{"path":"https://william-swl.github.io/baizer/reference/write_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write a tibble into an excel file — write_excel","text":"","code":"# write_excel(mini_diamond, \"mini_diamond.xlsx\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-050","dir":"Changelog","previous_headings":"","what":"baizer 0.5.0","title":"baizer 0.5.0","text":"CRAN release: 2023-05-08","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-045","dir":"Changelog","previous_headings":"","what":"baizer 0.4.5","title":"baizer 0.4.5","text":"CRAN release: 2023-04-17","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-040","dir":"Changelog","previous_headings":"","what":"baizer 0.4.0","title":"baizer 0.4.0","text":"CRAN release: 2023-04-11","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-030","dir":"Changelog","previous_headings":"","what":"baizer 0.3.0","title":"baizer 0.3.0","text":"CRAN release: 2023-03-10","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-020","dir":"Changelog","previous_headings":"","what":"baizer 0.2.0","title":"baizer 0.2.0","text":"CRAN release: 2023-03-03","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-010","dir":"Changelog","previous_headings":"","what":"baizer 0.1.0","title":"baizer 0.1.0","text":"CRAN release: 2023-01-10","code":""},{"path":"https://william-swl.github.io/baizer/news/index.html","id":"baizer-0009017","dir":"Changelog","previous_headings":"","what":"baizer 0.0.0.9017","title":"baizer 0.0.0.9017","text":"Added NEWS.md file track changes package.","code":""}]
